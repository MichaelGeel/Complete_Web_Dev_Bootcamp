# Section 14: Introducton to JavaScript ES6

## 75. Introduction to JavaScript:


Back in the 90s, HTML websites were all form and no function, and if it needed some functionality, the website would have to send the request to the server, which would do all the computation and return the webpage with the new data.
However, a more dynamic web was envisioned with animations and real-time user interaction.
To do this, you needed to remove the server from the equation and have the code able to run in the browser.
So a small scripting language needed to be created, and the requirements for this languge was that it needed to be simple and easily usable by non-developers and non-coders.
JavaScript has become the foundation for the web, and in your browser, you can disable JavaScript, and will see just how different everything looks without it, but some websites can't even be loaded (such as YouTube) with JavaScript disabled.
Originally, JavaScript had many different versions and eventually, the langauge got standardized by the European Union, and the language was called ECMAScript.
    Often, you'll see different versions of JavaScript referred to as "ES5" or "ES6" and here the ES comes from ECMAScript.
The "Script" in JavaScript comes from the fact that the scripting languages uses scripts to tell websites/HTML Elements what to do.
Java and JavaScript are completely unrelated and dissimilar and the only reason JavaScript was called that was because in the 90s the word "Java" was incredibly popular and in fashion.
    The main difference between the 2 is that JavaScript is an interpreted language whereas Java is a compiled language.
        An Interpreter executes code line-by-line.
            This takes comparitively longer but allows you to know where an issue occurs as it occurs.
            It also immediately begins code execution upon being run.
        A Compiler executes all the code in one go.
            This takes a little longer up front as it reads all the code, and then executes everything incredibly fast.
            But if there's an issue, you won't catch it until the program has finished running.
Originally, JS was just a Frontend language for adding animations or allow some user interaction.
    Nowadays, JS has frameworks for Frontend, Backend and everything else.
    Some of which we'll learn about later on.
JS is also the only langauge supported by all major browsers, other languages can be used and compiled into JS, JS is still most popular and the language powering the web.


## 76. Javascript Alerts - Adding Behaviour to websites:


In chrome, in the CDT, next to the elements tab, is a tab named "Console" which is a JS console that allows you to start writing JacaScript straight away and will run the code as you hit Enter.
    For example, writing:
        alert("Hello"); and hitting enter so Chrome runs the code, will result in a popup appearing with the message of Hello.
While the CDT Console is useful, it has a downside, for example if we wanted 2 alerts to happen, as soon as we've coded the first alert and hit enter to the next line,
the line is executed and the alert appears.
    The way to get around this, is to hold Shift + Enter, which takes you to the next line without executing the previous instruction.
    Though this is still painful, so let's look at another way to write JS code that can be executed in Chrome.
In CDT, the next tab to the right of Console, is Sources.
    And in the left sidebar window, there's a double left arrow at the top, it brings a dropdown, and we'll select "Snippets".
    We'll then click a new snippet, and give the script a name.
    We now have a JS file that we can start writing code inside of the file, as many lines as we want.
    Then when we want to run the code, at the bottom right of the code window is a play button that we can press to run the code.
Console is more meant for testing out single lines of code, whereas the Snippet editor is for multi-line code testing.
This snippet editor is also what we'll be using for the next few lessons and challenges.
    Though the code will likely be translated over for the sake of recording the lessons.
Now how will we know when we've given an erraneous instruction:
    If we have the 2 alerts previously made, and then on a 3rd line, we write: say("Yo!");
    This is an incorrect line, and when we run the code, the first 2 lines will run successfully, but the 3rd line will be where the code crashes with and error.
    The console will then give you an error message to tell you what the error is so you can troubleshoot it.
        In the example we just used, say is not a keyword that the browser recognizes.
So to see what are valid keywords, we can head over to the MDN Docs and select JavaScript as our technology, then you can see all the documentation for JavaScript available here.
    If you search for the alert we used, we'll get the "window.alert()" method that we used and it'll detail how the code actually works.
    You'll also be given an example of the code and what the output looks like.
    Notice that the full version of the code we'd written is:
                window.alert()
    But what we used and what most people go with is the shorter version:
                alert()
Looking at the alert() keyword, these keywords are referred to as "functions" which is a behavior that is executed by the browser.
At the end of each line is the semi-colon, which denotes the end of the instruction, so the browser doesn't confuse one line and the next.
Everything between the open and close brackets are what gets used by the function in question.
Note that there are many different languages in the world, and each one uses different syntax (they're written differently).
    For example python doesn't require a semi-colon at the end of each line.
Note that in a programming language, the open/close quotation marks are the same symbols and what you get in a word processor are not the same, 
    however, when typing in a IDE, the symbols are auto-converted correctly.
    It's important to be aware of this when copy-pasting code from various sources.
Be aware of the styling of the code, such as where to put spaces, as this affects the readability of the code.
    Convention dictates that double quotes be used for text strings.
The important thing is that: All code in any code-base should look like a single person typed it, no matter how many people contributed.
Note the starred GitHub repository for the JS style guide: "idiomatic.js"
    Important to read through this to learn the styles and conventions of JavaScript coding.


## 77. Data Types:


Continuing from the previous lesson's examples, from the alert("Hello"); function, how does the browser know which part of the code
is actual code and what is the text we want to display.
    So the quotation marks encapsulating the Hello denotes that it's a string.
Everything enclosed in single/double-quotation marks gets interpreted as a string, which means it's not run as code but instead interpreted as text.
This is important as the computer needs to know which parts are code vs which are just text.
This is where Data Types come in, because a string is exactly that, a data type.
Data Types are a way of classifying data to tell the computer how the program intends to use the data.
There are numerous other data types beyond strings.
Naturally we have the number data type, in the form of numbers.
And Boolean, in the form of True/False
In the console, we could just type 2+3 and it'd output the answer of the sum.
    Or we could type alert(2+3); which would have the popup displaying the answer to the sum.
Now we'll be looking at a different function:
            typeof()
    This function tells you the data type of whatever you put in the brackets.
    For example: typeof(23); will output number.
        typeof("bob"); will output string.
        typeof(true); will output boolean.


## 78. JavaScript Variables:


We can commit pieces of data to the memory of the computer, but first we need to enable the user to enter a piece of information.
    To do this, we'll now learn about the prompt(); function.
Inside the CDT sources file, we're going to write:
            prompt("What is your name?");
    Running this will show you a prompt, which is a popup that allows the user to input something.
At the moment, the information entered goes nowhere, you can't retrieve it or get it back.
    It's not being committed to memory.
In order to commit the information to memory, we can use a variable.
    For example, we can write:
            var myName = "Mike";
    If we run this in the source file and then go to the console below it and just type in the variable name "myName" the console will output the value we assigned to the variable.
    This is because that piece of data has been committed to memory.
Looking at the syntax of code we wrote above:
    "var" is a keyword that tells us we're creating a new variable or data container in memory.
    "myName" is the name we've given this variable and is what we use to reference the container and its information.
    the "= 'Mike'" is the value that we're assigning to the variable/data container.
        And so now whenever we use myName, the computer will know we're talking about the string "Mike".
Looking at the syntax a little deeper:
    Whenever the computer encounters the keyword var,it essentially knows that it has to construct a new container
    The container gets given a name, which is what follows the var keyword.
    And whatever comes after the "=" is what is going to be housed in the container.
    And finally the semi-colon marks the end of the line.
'var' stands for the word variable.
    Meaning the data inside the variable container can be changed.
    So if we wanted to change the value, we can tap into that variable container by writing its name, and set it to equal a new value.
        myName = "Bob";
    And whenever you re-assign the variable value, the old value falls out of memory and is replaced by the new value.
Notice in the above case, we didn't have to repeat the var keyword.
    The keyword "var" is only used when you're constructing a new variable to contain your data.
When you decide to use/change the variable, you only need to reference it by name.
If we wanted to output the variable as an example:
            alert(myName);
    This will output the value contained inside of the variable.
In the same way we can save information provided by the user:
            var userInput = prompt("What is your name?");
Now we can write an alert that combines the variables together.
            alert("Hello "+yourName+"!");
    This creates a message using the variables we're referencing and substitutes their values in their place.
On a more practical level, you could have a variable:
            var gameLevel = 1;
    And whenever the user progresses, you can increase the gameLevel value which you can then reference back to whenever needed.


## 79. JavaScript Variables Exercise Start:


Between lesson 79 and 80 is a coding test intended to test understanding of JS variables.
The exercise provides instructions on what to do along with a code space in which to do the exercise.
This particular exercise has 2 present variables and the goal is to swap the variables around.
    The solution will be copied into the JS files associated with this lesson (79).
Note in JS (seen in the exercise) to print something to the terminal, we use:
            console.log();
    Similar to print() in Python.
Note the rules provided in the instructions related to this particular challenge.
When we're done with the exercise, we can click the "check solution" in the bottom right corner to confirm if it's correct.
Note that lesson 80 contains the solution for this exercise, and the solution will be copied into the lesson 80 file as well.


## 80. JacaScript Variables Exercise Solution:


Solution involved creating a temp variable and setting it to one of the variables, then setting that variable to the other, and then the other to the temp variable.


## 81. Naming and Naming Conventions for JacaScript Variables:


This lesson will cover some important points about how you should name your variables so that you're upholding programming best practices.
Starting out separately, if your console is getting cluttered with lots of outputs, you can clear the console using CTRL + L.
    This does not clear the variables and information stored in memory.
If we wanted to clear all of the data, we're going to have to do a hard clean.
    We're going to have to empty our cache and delete all of the data.
    In the browser window, click on hold on the reload button, and you get 3 options, one of which is "Empty Cache and Hard Reload"
    Now if you select that option, none of the variables will be in memory anymore and you'd have to re-initialize all the variables again.
There are some rules that govern how you should name your variables.
    It doesn't actually matter what you call a variable.
        But this doesn't mean go ahead and type anything, because a hard to type variable will make it difficult to be referenced again later on in the code.
    And you want the variable name to maintain meaning related to what it stores, so that you can quickly and easily know what the variable stores.
These are the common rules that good programmers will follow:
    1) Give your variables meaningful names.
        So that anyone who sees the name can quickly and easily figure out what data is likely stored inside it.
    2) There are certain things that JavaScript will not let you do when you're trying to name a variable.
        You can't call it a keyword.
            But you can have a variable that contains the keyword as part of it.
        Your variable name cannot begin with a number.
            But it can contain numbers anywhere else in the name.
        Your variable name cannot contain spaces, as the space causes the program to think you're trying to write a separate piece of code.
    3) Your variables can only be made up of letters, numbers (except first character), the $ and the _.
        No other symbols are valid for naming variables.
    4) Lastly, we name all our variables using camelCasing.
        Meaning the name starts with a lower case, and every subsequent word is capitalized.
            This is useful as it prevents words from being misread.
A quiz regarding variable naming best practice follows this lesson.


## 82. String Concatenation:


Previously, we saw we can combine strings using the plus sign, this creates a single string using what's called "Concatenation"
    Here, you're joining together everything that's inside a quotation mark and ignoring everything else.
    For example:
        "a"+" "+"b" becomes "a b" as a single string.
Challenge to utilize variables along with a prompt and string concatenation to greet a user who's just entered their name.
    See associated file for the code.


## 83. String Lengths and Retrieving the Number of Characters:


Another feature of JS strings is that we can easily determine the number of characters in a string by tapping into its "length" property.
To get the number of characters inside the string, we can simply write:
        string.length
    This returns the number of characters in the string as a number.
Challenge:
    Write some JS code where the user can enter some text.
    The code then tells the user 2 things:
        -How many characters long the string is.
        -How many characters out of 140/280 they have remaining.
    See solution code in the associated file.
Needed to use the minus operator as well to calculate remaining char length.
There are 2 ways to comment code is JavaScript:
    Using // to comment out all code that follows after the // for the rest of that line only.
            Or
    You can encapsulate multiple lines betwen /* text */ to comment all those lines out at once.
Note some of the data used for this solution could have been done inline as well as opposed to what was done in storing it all in variables.
Note that if you run the code and then swap tabs, your prompt popup gets dismissed and your variable storing the user input gets a Null value, 
    which causes the code to error out as a Null value has no length property.


## 84. Slicing and Extracting Parts of a String:


Continuing with the example from the previous lesson, we'll be building upon it.
In this lesson, we'll improve the functionality so that instead of simply giving a character count, we just removed the extra characters.
To implement this in JavaScript, we'll be using a function called:
            slice(x,y);
What this function does, is it allows you to slice a string to separate them into individual characters (or portions).
Note to quick comment a line, highlight it and press CTRL + /
Looking at how slice works, say we have a string variable of x length, we can get slice of that string by calling:
            stringVar.slice()
    And in the brackets after the slice, we can include 2 values, the index where the slice starts and where it ends (non-inclusive).
    So if we say stringVar.slice(0, 3); it'll return the first 3 letters of the string variable.
Note that indexes of characters start at 0.
If we only pass a single value to the slice, it'll return everything in the string from that index position to the end of the string.
Note that with slices, if you provide a stop index for the slice that is bigger than what is available in the string, it'll simply return what's left in the string from the start to the end.
Challenge for the lesson:
    Improve the previous exercise, so that when you enter the text block, if the text string is longer than 280 characters, it cuts off the rest and returns only the 280 characters.
Solution code in the associated file.
    Simply had a user prompt for text, a slice assigned to the variable, and then outputting it into an alert.
Alternatively, could be done without variables and having it all in a single line.


## 85. Challenge: Changing Casing in Text:


The last string related method we're looking at is the .toUpperCase() method, which changing all characters in a string to upper case.
    For example:            stringVar.toUpperCase();
Note that a function like this doesn't change the variable itself, it's applied onto the data of the variable as it's being outputted.
Only be assigning the variable.toUpperCase to another variable (or itself) would the all-caps string be saved.
There's also a method that does the opposite, and converts all the characters in a string to lower case:
            stringVar.toLowerCase()
Also note that apparently the console only outputs the last message sent to it in the code.
    For example, in you call 2 variables to be printed to the console, it'll only show the last one.
This is useful because it allows for you to implement consistency across all information when you're getting inputs from various users.
Lesson Challenge:
    Prompt the user for their name.
    Then respond with an alert saying "Hello, " and the user's name with only the first letter capitalized.
See solution in the next lesson's code.


## 86. Challenge: Changing String Casing Solution:


See the solution for the challenge in the associate code file.
    We get the user name and store it in a variable.
    Then we use .slice and .toUpperCase to capitalize the first letter of the user's name in a variable.
    Then we use .slice and .toLowerCase to lower the rest of the letters in the user's name in a variable.
    We bring then together using string concatenation to recreate the user's name with a capitalized first letter.
    Finally, we send the user an alert with their capitalized name.
Note to use the length property to specify exactly how many characters to slice out of the lowerCase portion of the name variable.
The important part of this goal was taking a problem, and breaking it down into smaller tasks that can be tackled one at a time.
Also note that it's important to code defensively/securely.
    For example, you don't necessarily need the .toLowerCase part of the code, but a user might add an upper case letter in the middle of their name, 
    which would fall through the cracks and not look right.


## 87. Basic Arithmetic and the Modulo Operator in JavaScript:


For the most part, working with Numbers in JavaScript is pretty straightforward.
You can add Numbers using the + sign:
        var a = 2 + 3; //5
You can subtract using the - sign:
        var b = 3 - 2; //1
You can multiple using the * sign:
        var c = 3 * 2; //6
You can divide using the / sign:
        var d = 6 / 3; //2
The only operator that's somewhat strange, is the module operator, represented by %
        var e = 9 % 6; // 3
    What modulo does is, it gives you the remainder of the division of the 2 numbers you're working with.
    For example, 9/6 is 1.5 (i.e 6 remainder 3) and what it returns is that remainder value.
This operator is useful in cases where you're trying to work out if a number is even or odd.
    If a number modulo 2 (numVar % 2) equals 0, then it's an even number and if it equals 1, then it's odd.
So far, it's pretty straightforward, but looking at a slightly more complex operation:
        var cost = 2 + 3 * 5;
    Depending on which operation we execute first, the value of the cost variable will change.
This is why we have what is called Precedence, to resolve these kinds of ambiguity. (See BODMAS)
    This rule states that we must first multiply and divide before we add or subtract.
    This rule is from Math and holds true in programming.
However, if we wanted the addition to be executed first, then we would encase that portion in a set of brackets as it would then be prioritized.
In order for your code to be easily readable and easily understood, it's good practice to encase the operation that happens first in brackets, even if you know what the result would be.
Lesson Challenge:
    Dog to human age converter.
    Equation:   humanAge = (dogAge - 2) * 4 + 21;
See solution in the associate JS file for this lesson.
    The solution could be simplified by not storing the humanAge in a variable.
    Also needed to add another set of brackets to show the multiplication's precedence over the + 21 portion of the equation.


## 88. Increment and Decrement Expressions:


Thus far all the operators we've seen exist in normal mathematics.
But we'll now be looking at some that only exist within mathematics.
    Doing it in normal maths, we'd set a variable x to equal a value, then write:
            x = x + 1;
But in most programming languages, instead of writing the above out, you can simply write:
            x++;
    This increments the value of x by 1.
    This is referred to as the Increment Expression.
You can also do this with minus 1 as well:
            x--;
    This reduces the value of a variable by 1
    It's referred to as the Decrement Expression.
Remember with ++ and --, you're only ever increasing or decreasing the value by 1.
If you want to increase/decrease it by more than 1, you can use the following:
            x += 3;
            x -= 3;
    This is a shorthand way of saying:
            x = x +/- 3;
    This works for addition, subtraction, multiplication and division.
Additional note, when you use the Increment expression, if you're assigning another variable to it at the same time, the new variable will take on the value of the old variable and the old variable will be incremented.


## 89. Function Part 1: Creating and Calling Functions:


This lesson and the coming lessons will be looking at how to create functions.
A function is basically a series of repeatable actions to save on needing to repeatedly re-type the same code over and over.
    It's a series of lines of code packaged together into a block of code and given a name.
The syntax for creating a function in JavaScript is as follows:
            function funcName() {
                //insert code here
            }
The 'function' is a keyword that tells the computer that you're constructing a function.
    Then it's followed by a name and a pair of brackets immediately after the name.
    And lastly some curly brackets that contain all the code you want to be executed in the function.
Once you've created that function, you simply call the function by its name, and it'll automatically execute all the instructions you've coded inside of it.
Now we've seen how to create the function, but to call (use) the function you simly need:
            funcName();
    This is a command, and it's how you get the computer to execute the code inside of the function you created.
Note that the naming rules we saw for declaring variables applies for functions as well.
In terms of style, when creating a function, it's good practice to make sure that all of the instructions inside the function are indented.
    An indent is a tab level.
    The closing curly bracket does not get indented as it indicates the end of the function.
If using alerts get tiring, we can instead use:
            console.log();
    This displays the message in the console, instead of creating a pop-up.
    Note that the alert is something that's seen by the user, the console is only seen by the developer.
    The console is meant for the developer for debugging and testing code.


## 90. Functions Part 1 Challenge - The Karel Robot:


This lesson will be a challenge to start writing our own functions, in an online tool called Karel the Robot.
Change the world to a 5x5 world.
Then you'll notice a function called main:
        function main() {
            // code
        }
    Everything you put into this function will get executed when you click the run button.
The robot can take a certain number of commands, that can be viewed.
We're able to write additional functions outside of the main function, which we can call inside the main function.
For this challenge, we need to write a function that moves Karel from the bottom left corner to the top right corner.
See the solution in the associated JS document.
Second Challenge:
    Need to put beepers down in a straight line from the Bottom Left corner to the top right corner.
See solution code in the lesson's JS document.
Additional challenge:
    Have Karel put beepers down in a chessboard formation.
    This challenge will be covered in the next lesson.


## 91. The Karel Chess Board Solution:


This lesson simply contains the notes for the solution to the Chessboard Karel the Robot Challenge.
See the related code file for both the provided solution and my solution.


## 92. A Quick Note about the Next Lesson:


This lesson simply provides some code allowing to follow along with next lesson (lesson 93).
See the associated file for the code in question.


## 93. Function Part 2: Parameters and Arguments:


There are 3 versions of functions.
    What we've been working with is the basic version, the simplest form of the JavaScript function.
The next version of a function in JavaScript is where your functions are able to take inputs.
    Previously, we had nothing between the brackets in a function because the function didn't take any inputs.
So now when adding an input into a function, you can use that input within the function based on your specific need for it.
To add an input into a function, you provide an input name between the brackets when declaring the function, and you can then use that variable within the function.
        function newFunc(funcInput){
            //code using funcInput;
        }
    The input is effectively a variable that contains the user's input.
Now when you call the function, between the brackets of the call, you need to pass a variable that will be assigned to the input you specified when creating the function.
        newFunc(inputValue);
    Whatever you pass as the input, it gets bound to the name of the input as declared in the function.
If you don't specify an input for a function that requires an input, the program will error out as it's expecting a value to be passed in the function call.
This is great for adding some dynamics to the funciton.
Challeng:
    Create a function that receives an amount of money and calculates how many milk bottles it can buy.
    Assume a bottle to cost 1.5.
See Solution for the challenge in the lesson's code files.
For this challenge, dividing the money by the cost of milk doesn't always give a "money friendly" answer, so for this solution we needed a method called Floor.
    This method cuts away the decimal places in a division and only returns the whole numbers of the sum.
    Note that the Math.floor() method takes a value, so whether you feed the equation directly or before and just pass in the answer you'll still get the same result.


## 94. Life in Weeks Solution:


Between Lessons 93 and 94 is a Coding exercise.
    This exercise is to create a function that takes your current age and returns how long you have to live from now until you're 90 in days, weeks and months.
Lesson 94 discussed the solution to the challenge, and my solution code will be in the file as well.
Because the exercise output had to be in a certain format, my code is exactly the same as the course solution.


## 95. Functions Part 3: Outputs & Return Values:


