# Section 14: Introducton to JavaScript ES6

## 75. Introduction to JavaScript:


Back in the 90s, HTML websites were all form and no function, and if it needed some functionality, the website would have to send the request to the server, which would do all the computation and return the webpage with the new data.
However, a more dynamic web was envisioned with animations and real-time user interaction.
To do this, you needed to remove the server from the equation and have the code able to run in the browser.
So a small scripting language needed to be created, and the requirements for this languge was that it needed to be simple and easily usable by non-developers and non-coders.
JavaScript has become the foundation for the web, and in your browser, you can disable JavaScript, and will see just how different everything looks without it, but some websites can't even be loaded (such as YouTube) with JavaScript disabled.
Originally, JavaScript had many different versions and eventually, the langauge got standardized by the European Union, and the language was called ECMAScript.
    Often, you'll see different versions of JavaScript referred to as "ES5" or "ES6" and here the ES comes from ECMAScript.
The "Script" in JavaScript comes from the fact that the scripting languages uses scripts to tell websites/HTML Elements what to do.
Java and JavaScript are completely unrelated and dissimilar and the only reason JavaScript was called that was because in the 90s the word "Java" was incredibly popular and in fashion.
    The main difference between the 2 is that JavaScript is an interpreted language whereas Java is a compiled language.
        An Interpreter executes code line-by-line.
            This takes comparitively longer but allows you to know where an issue occurs as it occurs.
            It also immediately begins code execution upon being run.
        A Compiler executes all the code in one go.
            This takes a little longer up front as it reads all the code, and then executes everything incredibly fast.
            But if there's an issue, you won't catch it until the program has finished running.
Originally, JS was just a Frontend language for adding animations or allow some user interaction.
    Nowadays, JS has frameworks for Frontend, Backend and everything else.
    Some of which we'll learn about later on.
JS is also the only langauge supported by all major browsers, other languages can be used and compiled into JS, JS is still most popular and the language powering the web.


## 76. Javascript Alerts - Adding Behaviour to websites:


In chrome, in the CDT, next to the elements tab, is a tab named "Console" which is a JS console that allows you to start writing JacaScript straight away and will run the code as you hit Enter.
    For example, writing:
        alert("Hello"); and hitting enter so Chrome runs the code, will result in a popup appearing with the message of Hello.
While the CDT Console is useful, it has a downside, for example if we wanted 2 alerts to happen, as soon as we've coded the first alert and hit enter to the next line,
the line is executed and the alert appears.
    The way to get around this, is to hold Shift + Enter, which takes you to the next line without executing the previous instruction.
    Though this is still painful, so let's look at another way to write JS code that can be executed in Chrome.
In CDT, the next tab to the right of Console, is Sources.
    And in the left sidebar window, there's a double left arrow at the top, it brings a dropdown, and we'll select "Snippets".
    We'll then click a new snippet, and give the script a name.
    We now have a JS file that we can start writing code inside of the file, as many lines as we want.
    Then when we want to run the code, at the bottom right of the code window is a play button that we can press to run the code.
Console is more meant for testing out single lines of code, whereas the Snippet editor is for multi-line code testing.
This snippet editor is also what we'll be using for the next few lessons and challenges.
    Though the code will likely be translated over for the sake of recording the lessons.
Now how will we know when we've given an erraneous instruction:
    If we have the 2 alerts previously made, and then on a 3rd line, we write: say("Yo!");
    This is an incorrect line, and when we run the code, the first 2 lines will run successfully, but the 3rd line will be where the code crashes with and error.
    The console will then give you an error message to tell you what the error is so you can troubleshoot it.
        In the example we just used, say is not a keyword that the browser recognizes.
So to see what are valid keywords, we can head over to the MDN Docs and select JavaScript as our technology, then you can see all the documentation for JavaScript available here.
    If you search for the alert we used, we'll get the "window.alert()" method that we used and it'll detail how the code actually works.
    You'll also be given an example of the code and what the output looks like.
    Notice that the full version of the code we'd written is:
                window.alert()
    But what we used and what most people go with is the shorter version:
                alert()
Looking at the alert() keyword, these keywords are referred to as "functions" which is a behavior that is executed by the browser.
At the end of each line is the semi-colon, which denotes the end of the instruction, so the browser doesn't confuse one line and the next.
Everything between the open and close brackets are what gets used by the function in question.
Note that there are many different languages in the world, and each one uses different syntax (they're written differently).
    For example python doesn't require a semi-colon at the end of each line.
Note that in a programming language, the open/close quotation marks are the same symbols and what you get in a word processor are not the same, 
    however, when typing in a IDE, the symbols are auto-converted correctly.
    It's important to be aware of this when copy-pasting code from various sources.
Be aware of the styling of the code, such as where to put spaces, as this affects the readability of the code.
    Convention dictates that double quotes be used for text strings.
The important thing is that: All code in any code-base should look like a single person typed it, no matter how many people contributed.
Note the starred GitHub repository for the JS style guide: "idiomatic.js"
    Important to read through this to learn the styles and conventions of JavaScript coding.


## 77. Data Types:


Continuing from the previous lesson's examples, from the alert("Hello"); function, how does the browser know which part of the code
is actual code and what is the text we want to display.
    So the quotation marks encapsulating the Hello denotes that it's a string.
Everything enclosed in single/double-quotation marks gets interpreted as a string, which means it's not run as code but instead interpreted as text.
This is important as the computer needs to know which parts are code vs which are just text.
This is where Data Types come in, because a string is exactly that, a data type.
Data Types are a way of classifying data to tell the computer how the program intends to use the data.
There are numerous other data types beyond strings.
Naturally we have the number data type, in the form of numbers.
And Boolean, in the form of True/False
In the console, we could just type 2+3 and it'd output the answer of the sum.
    Or we could type alert(2+3); which would have the popup displaying the answer to the sum.
Now we'll be looking at a different function:
            typeof()
    This function tells you the data type of whatever you put in the brackets.
    For example: typeof(23); will output number.
        typeof("bob"); will output string.
        typeof(true); will output boolean.


## 78. JavaScript Variables:


