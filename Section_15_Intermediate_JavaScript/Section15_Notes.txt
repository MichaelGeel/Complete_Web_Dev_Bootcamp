# Section 15: Intermediate JavaScript


## 99. Random Number Generation in JavaScript: Building a Love Calculator:


This section is going to be looking at some more advanced features in JavaScript, such as randomization and control flow.
JavaScript has a way of generating random numbers using the Math.random() function.
    It generates a 16 decimal place number between 0 and 0.9999...(16 9s).
    For example: 0.7032882360745665
The function never reaches 1.
This is useful as it allows us to generate up to a billion random numbers.
Note that a function always requires a set of brackets to be run, even if no input is required.
Now if we wanted to use this function to simulate a dice roll, for example:
    We could first multiply it by 6.
    Then we can use Math.floor() on the number to turn it into a whole number to return to the user.
Note that with math.Floor(), you need to add 1 to the result as the number range from 0 to 5 instead of 1 to 6.
    Adding 1 to the result would fix the output range.
The Math.random() function is called a "pseudo-random number generator".
    It's called this because a computer is essentially a bunch of switches, and depending on whether a switch is on or off, you get 1s or 0s.
    And through these switches the computer does all its computing.
    But there's one thing it's not very good at, which is being random.
Becuase a computer is an entirely deterministic process, it's not very easy to get a true random number.
    So instead, people have created mathematical formulas designed to simulate this process instead.
So we've mentioned how the Math.random() function returns a value between 0 and 0.9xe-16, but that return is not very useful to us until we scale it.
    This is easily done by multiplying it by the max value of the range we want.
    Then naturally manupulate the decimals to fit your needs and modify by the minimum value of the range (adding it.)
The above process is a simple way to achieve any number range desired (provided the range is less than a billion values).
    Granted you could raise the random number to itself to increase the possible output range.
Lesson Challenge:
    Get 2 prompts from the user for 2 names.
    Then ignore the names and generate a random number between 0 and 100 (inclusive).
    Return it to the user using an alert.
See solution code in the associate notes file.
Note that with the random function, if your range is from 0 - x, then multiply it by x+1 as the random numbers won't include the x+1 value.


## 100. Control Statements: Using If-Else Conditionals & Logic:


Expanding on the previous lesson's work, we'd like to be able to give our user a custom message based on their love score.
In order to do this, we need a way of checking what score the user got and responding differently based on that score.
To do this, we need to make use of Conditionals.
    The way these work is we can use the keyword "if" to evaluate a statement.
        If the statement is true, a particular block of code will be executed,
        If the statement is false, the code either gets skipped, or a different code block nested under an "else" gets executed.
In programming, this is known as Control Flow.
    Because we're essentially controlling the flow of the program.
Looking at an example of an "if...else" conditional:
            if (conditional statement){code};
            else {code;}
    We start with the conditional statement, followed by a pair of brackets containing the conditional statement.
    Followed by the code that executes if the conditional statement is true.
    Afterwards comes the option "else" statement, followed by the code that executes if the conditional is false.
The above example is a compressed version for the syntax of an if/else statement, check the lesson notes.js file for the conventional if/else layout.
We'll now use the conditionals to edit the code in the love calculator.
    Simply testing for above a score of 70 and giving a special output, else it gives the old output.


## 101. Comparators and Equality:


The symbols of comparison in the If statments, such as:
    Greater than:   >
    Lesser than:    <
    Equal to:       ===
These are known as Comparatives, because they allow us to compare two different values.
Looking at the comparatives and their meanings:
        ===:        Left side equal to right side.
        !==:        Left side not equal to right side.
        >:          Left greater than right.
        <:          Left less than right.
        >=:         Left greater than or equal to right.
        <=:         Left lesser than or equal to right.
These comparatives give our conditionals (such as the if/else statements) a lot more flexibility.
Now sometimes, instead of using 3 equals signs (===) to measure equality, you see people using 2 equals signs (==).
    There's a big difference between these 2 signs.
Let's say we have 2 variables:
        var a = 1;
        var b = "1";
    Note same number, different data types.
Now if we test whether a === b in an if statement, we'll get False (they're not equal).
But if we test whether a == b in an if statement, we'll get True (they're equal).
So while both signs check for equality, with ===, it checks that the data types are matching.
    And with ==, it ignores the data types.


## 102. Combining Comparators:


We'll now be looking at how to combine comparatives.
The 3 basic comparatives are:
    && meaning AND  (meaning condition 1 and 2 must be true)
    || meaning OR   (meaning condition 1 or 2 can be true)
    ! meaning NOT   (meaning the opposite of the condition must be true)
So going back to the love calculator, between the if and else statements, we'll add another if.
    if (condition1 && condition2) {}
Following this lesson is a coding exercise in the course, the solution for it will be added to this lessons code file.


## 103. Introducing the Leap Year Code Challenge:


This lesson is an introduction to another coding challenge that follows after this lesson.
    Lesson 104 will be looking at the solution to the coding challenge so my solution to the challenge will be housed there as well.
The instructions and criteria for a leap year are provided in the challenge instructions.
    Examples are included as well.
Can use draw.io to create a flowchart on how the leap logic should work.


## 104. Leap Year Solution:


The challenge was completed successfully.
    Start by check mod 4
        If true, next check
        If false, not leap.
    Check 100
        if true, next check
        if false, leap.
    Check 400:
        if true, leap
        if false, not leap.
This solution logic takes the form of 3 nested if statements with the same logical outcomes mapped to the if/else code blocks.


## 105. Collections: Working with JavaScript Arrays:


We've seen that you can store data in variables, but so far we've only been able to store a single piece of data in a variable.
    Naturally we've also seen that you can store different data type as well.
Now it's possible to also store a collection of related items in the same variable.
    To do this, we create an "Array".
An array is essentially a collection of items that are related, and they can be stored together into the same container or the same variable.
To create an array:
                var arrayItems = [item, item, item, item];
    You create a variable and give it a name.
    Then you set it equal a bunch of data enclosed in the square brackets, with a comma separating each data item.
To retrieve a piece of data from the array, we simply reference the array variable name, followed by some square brackets with the index position of the piece of data we want in them.
                arrayItems[0];
    Remember the index of the data points in the array starts from 0.
        This means the index of the last item in the array is always 1 less than the length of the array itself.
There are a number of other things we can do with arrays:
    We can access the length of the array using:
                arrayItems.length;
        This returns the number of items in the array as a number.
Note that whenever you see square brackets, then its usually got something to do with a collection data type such as a array.
    We use the square brackets both when creating arrays and when trying to retrieve items from arrays.
If you try to print out the array itself using something like:
                console.log(arrayItems);
    It'll print out the entire array itself into the console.
Another feature of arrays is the array.includes() function.
    For example:           arrayItems.include(item2);
    This function will take an input data item and then check if that same item already exists within the array.
    If it finds the item, it'll return True, in it doesn't, it'll return False.
Challenge:
    Take guest list drawn up in course.
    Prompt user for name.
    Check if name in the guest list.
    If user found, message welcoming them.
    If not found, message telling to screw off.
Solution simple:
    Create array, get guest's name.
    use if statement to check in user in array.
    If they are, welcome message, else rejection message.


## 106. Adding Elements and Intermediate Array Techniques:


One of the most common questions encountered during any coding interview is a question called FizzBuss.
    It's defined as:
        Write a program that prints the numbers 1 to 100, but for multiples of 3, print "Fizz" instead of the number 
        and for multiples of five, print "Buzz".
        For multiples of both 3 and 5, print "FizzBuzz".
For example:
    4 = 4
    3 = Fizz
    5 = Buzz
    15 = FizzBuzz
We're going to use this interview question and make it even more difficult by using it to learn about arrays on a deeper level.
Start by getting code to print out a sequence of numbers starting from 1.
We can either add items into the array starting out, or we can use the array.push() function.
        In this function, whatever is between the brackets after push gets added to the array.
    Remember that push always places the item added to the array to the end of the array.
A related function is array.pop();
    This returns the last item in an array and then removes that last item from the array as well.
The problem is we still would have to add each item to the array manually at this point.
    So we'll create a function to handle this.
Challenge 1:
    Write a function that'll add the next number in the sequence to the array when you call it.
See my solution and course solution in the code file for this lesson.
So in the course, the solution is simpler, they simply declare a count variable that gets incremented in the function.
    Note that it seems the console keeps track of the code state after running, so when count in incrememnted, the console maintains that increment.
        This could be because the console is inside the browser and the browser is what's keeping track of the data.
Now we need to get the code to put in fizz or buzz when the number is a multiple of 3 or 5.
    For this, we'll use the modulo operation.
        The modulo operation is great for checking if a number is divisible by another number.
Challenge 2:
    including logic tests to check if divisible by 3, 5 or both and pushing the appropriate data into the array.
In if statements, you can create "else if" extentions to the if/else block without having to nest if statements inside the else block.
Alternate solution:
    Initially do a double check for both 3 and 5 before checking for 3 or 5 or just a number.
Between this lesson and lesson 107 is Coding exercise 6, the solution will be pasted in lesson 107's code file.


## 107. Who's Buying Lunch Solution:


Personal note: remember the behavior of the Math.random function here!
    Between 0-0.9e10^-15, and have to multiply by the modifier to range desired.
But otherwise, managed the solution just fine.


## 108. Control Statements: While Loops:


Currently, function still very manual.
If we wanted to run FizzBuzz up to 100, would have to run the function manually 100 times.
To automate this, we'll now be using Loops.
The simplest types of loops are "While Loops"
                    while (condition is true) {
                        //Code to be looped over
                    }
    Basically, while a given condition is true/met, run the code in the code block encapsulated by the curly brackets of the while loop.
Once the condition of the while loop is no longer met, it skips the encapsulated code and continues to run the code after the while loop.
If we wanted to modify the fizzbuzz function to now automatically run up to 100, then we can add a while loop to it.
    See lesson code file for the new fizzbuzz function.
Now whenever we call the fizzbuzz function, the function auto runs from 1 to 100 and does all the checks for fizz, buss or fizzbuzz and then prints the array.
    Note that it's important to increment the count inside the while loop otherwise it'll run infinitely on the same number.
The while with while loops is that they're quite error prone, for the exact reason above, leading to an infinite run.
    If a while loop is running infinitely, the tab will likely crash as the program has run out of memory.
Lesson challenge:
    Use a while loop to print out the lyrics of the song 99 Bottles of Beer.
    My solution will be in the linked code file and the course solution will be in the next lesson's file.


## 109. Solution to the 99 Bottles Challenge:


Note for my solution, the last 3 numbers, 2 bottles, 1 bottle and no more bottles were done individually as they had unqiue lyrics changes in them.
Note that I could likely have used an if statement to alter the word "bottles" depending on the count, as that would have been a more dynamic means of coding the solution.


## 110. Control Statements: For Loops:


