# Section 25: EJS


## 208. What is EJS?


EJS stands for Embedded JavaScript.
Previously, we saw that if we have an HTML website where we have a form with an input, if we want to type something into that input, then it can be received in our index.js via the POST route and we can use body-parser to tap into what was entered into that input.
    You type something into the form and hit Submit, it then hits up our POST route in our server and we receive that value via the request.body.
    Now somehow, we want to be able to send this information to an HTML file and insert it in there.
    Once we've inserted that into the HTML file, then we can render the entire file in our browser and it should display the updated information.
This describes the entire process.
    But the part where we send it into the html file is the unknown at the moment.
    Specifically described: We need to be able to pass something from our server to be rendered in an HTML file.
This is done using templating.
    Inserting it into the HTML directly like previously done works in principle, but the moment your HTML file becomes even the slightest bit large, the file is going to become incredibly large.
    It also does not follow the separation of concerns.
To do this, we need to use what's called a "Templating Language"
    There are many available: handlebars, pug, twig, Jinja, EJS.
    Some of these are for different languages.
The most commonly used templating language for JavaScript is EJS.
EJS is essentially like having a little JavaScript module that can run JavaScript code inside an HTMl file.
    The file ends with the .ejs file extension.
    It's basically just HTML with bits of JS code enclosed inside special syntax.
    For example:
                    <% for(let i=9; i<items.length; i++) { %>
                        <li>
                            <%= items[i] %>
                        </li>
                    <% } %>
        This is a for loop that loops over a bunch of items that generates a list item for each item in the list.
This means that data can be sent from the server-side, to our ejs file and then rendered on the screen accordingly.
Note that when it comes to implementation of this, we can't use res.sendFile in Express, because it is STRICTLY for static files.
Instead, we use a different method called:
                    res.render("index.ejs",
                    { name: req.body["name"] }
                    );
    What this allows us to do, is specify the file we want to render on screen, and then add a JS object that allows us to pass over some properties.
    The JS object is in the form of key/value pairs.
Then in the EJS file, we can insert the properties in the JS object that was passed over by referencing it's key.
    Note that we encase a property/variable in <%= %> when we want to reference and insert it.
Before we can start trying out EJS, we need to install something called the EJS language support plugin into VS Code, which will allow VS Code to do syntax highlighting with EJS and also have correct auto-suggestion.
We'll be building a basic website from scratch now that detects whether it's a weekday or weekend and displays an appropriate message alongside it.
    Need the JS getDay() function, returns number from 0-6, 0 = Sunday, 6 = Saturday.
Completed the project successfully using the Date object and the getDay() method along with a switch to detect the case of the date.
    Then proceeded to load up and render the EJS template with the dynamic content provided to it.
Note*** was supposed to start from scratch using npm init to build the entire project up from scratch instead of using the provided package.json file to download the packages.
When using the command line, can stack commands next to eachother like this:
                    "mkdir views; touch index.js views/index.ejs"
An alternative to the switch case would be to simply only specify minority cases, and let the majority case be the default, insted of casing for each of the the 5 days that would be a weekday.
    Similarly, could also just use an if statement to test for the weekend here as it's a single minority case.


## 209. EJS Tags:


Let's dive depper into EJS syntax and see ho we can use the different EJS tags to achieve what we want using this templating tool.
There are a number of EJS tags, and these are the ones we'll see more commonly:
        <%= %>
        <% %>
        <%- %>
        <%% %%>
        <%# %>
        <%- include("<FILE NAME>") %>
The structure of an EJS tag no matter the type is pretty simple.
    It always starts with an <% and generally always ends with a %>
    The part that's different is usually in the opening tag, as seen above.
Looking at these individually:
    <%= %>
        This says that whatever goes inbetween the open and closing parts of the EJS tag will be interpreted as JavaScript, but in addition, there will be an output that's going to be put into that HTML/EJS file.
        For example, we can insert a variable that could be a name or something else.
        Then when this EJS tag is rendered in the browser, we'll see the variable's value show on the website.
    <% %>
        This denotes executable JavaScript code.
        You could write any sort of JavaScript code and it will be treated just like JavaScript code.
        But this does not give an output, the code will be evaluated, but nothing will show up in the browser.
    <%- %>
        Whatever is passed in here, should be interpreted as HTML.
        Meaning we can write/send HTML to the EJS that will be rendered and interpreted as HTML.
    <%% %%>
        This is an escape EJS tag.
        We add the extra % sign either at the start or end tag and this allows us to actually show the EJS tags instead of them being considered code.
    <%# %>
        This is how to write EJS comments.
        Everything in here won't be executed or rendered and will be considered a comment.
    <%- include("<FILE NAME>") %>
        Inside the ("") we add the name of an EJS file.
        This allows us to insert another EJS file into the EJS file that this tag is currently in.
        This tag enables us to create a website page with the same header and footer that'll be the same across the entire website and the body content will be changed for each page.
            And this include tag allows us to just insert a header and footer ejs and then hand-code the body.
Looking at an example of implementing this EJS tags:
            <% for(let i=0; i<fruits.length; i++) { %>
            <li>
                <%= fuits[i] %>
            </li>
            <% } %>
    This loops over this items and outputs each item into a list element in order.
Lesson Exercise:
    We have an index.js with and Express app set up.
    Inside the app.get, is a data object we send to our EJS file.
    We also have a footer.ejs with a basic footer in it.
    We need to modify the index.ejs file to achieve one of 2 outputs (depending on the seconds):
        A title displayed in h1, the current seconds displayed in a paragraph element.
        If the current seconds are odd, then show no items.
        But if even, then display items in the list.
    Then render the html as html and lastly pull in the footer from the footer.ejs file.
Note: when assigned a JS object and feeding that into the EJS file, you don't reference the object variable name, just directly call the properties of the object.
Successfully completed the challenge, minus the above note regarding feeding data into the ejs file.
Note that each and every single portion of JavaScript code needs to be encased in EJS tags, even lone brackets.
    Every line needs a dedicated EJS opening and closing tags around them.
An alternative to the for loop we used:
    Call the forEach() method on our Array:
                    arrayVar.forEach((item) => {
                        console.log(item);
                    });
        This runs through the anonymous function for each item in the array and passes that item into the anonymous function.
Remember that when referencing another EJS file, it should also be inside the views folder as well.


## 210. Passing Data to EJS Templates:


Let's take a deeper look into passing data in EJS from server to client-side and from client to server-side.
We've already seen passing data from the server to client side in EJS using the res.render method, passing the EJS file to render and whatever data it needs.
    The data has a property key/value pair that the EJS tags can then work with accordingly.
Similarly, we looked at how to pass over an array that we've passed to the EJS file.
Now, if there is no data being passed from the server but that the EJS is expecting, it'll crash the application.
    This can happen if there's a bug in the code or if the data gets corrupted.
This is because EJS doesn't scope variables.
    This means that EJS doesn't check whether a variable exists or not before using it.
    Instead, it tries to use it, doesn't find anything, and then crashes the entire app.
This is a caveat to be aware of in EJS.
Now to get around the above issue, we can surround any block of EJS code in an if statement that'll check for the presence of a variable, but we need to make use of a variable called "locals"
    For example:
                            <% if (locals.fruits) { %>
                                remaining ejs code in if statement
                            <% } %>
    res.locals is basically a way to access all of the variables that are sent over with res.render.
    You can also manually set res.locals to equal some piece of data.
                            res.locals = {data: 42}
    And this res.locals can be accessed in the EJS file.
    Whenever we call a variable directly (e.g. fruits, numbers, etc) in EJS, it's actually a shorthand for locals.<varName>
This locals variable always exists and that means that we can always use it to check for the existence of variables that are meant to be passed over to EJS.
    Then if the if statement coded above finds that variables within locals, then the code continues to run normally.
Now looking at it the other way around, passing data from the client/ejs side back to the server.
    Let's say we have a form on our website that we want users to fill in.
    Then we want to be able to handle that data in our server.
As seen in previous examples, the easiest way to do this is through a POST request.
    The form would then exist in the ejs side.
                    <form action="/submit" method="POST">
    Then when the form gets submitted, then these pieces of data are labelled under their name attributes.
    Then naturally body-parser would catch and process the body allowing the data to be worked with on the server side.
Lesson exercise:
    Looking at the solution example:
        The home route loads a form asking for your name and surname.
        When you click submit, the h1 reloads and tells you how many letters there are in your name.
        The form is still present but it's now cleared out again.
    Need to replicate this functionality using the index.js and index.ejs files.
        Need to write the app.get and app.post routes as well as the ejs logic.
Successfully completed the challenge.
    Note that when using render to call the EJS file, it auto detects the filepath to the views folder (assuming views folder is in the same directory as the index.js file) 
        We simply pass the name of the EJS file to be rendered.
Remember to always use const instead of let if we know the variable value isn't going to change.


## 211. EJS Partials and Layouts:


Something that hasn't been considered so far in our backend and server-side development is styling and all everything we've learned about the frontend that makes our website look beautiful.
To add all this styling, we'd need to add quite a lot of code into the head section of our HTML files.
    Adding in all the stylesheets, adding in a navbar etc.
If we simply go ahead and add a bunch of stylesheets into the head section of our EJS files, you'll notice it doesn't actually work.
    This is because these files are what's known as static files.
    The CSS or images you want to use on your website don't change, unlike the HTML files being interpreted, and rendered from your backend, or the JS code that determines the functionality of the website.
Normally, what happens with Node-based backends is we create a public folder where we add in all of our static files, such as our images, styles and whatever other files don't change.
    Then to tell Express where our static files are located, we can use the middleware "express.static" and define the location of our public folder.
                        "app.use(express.static("public"));"
        This assumes public is in the highest level directory for the application.
    Once we've told Express where our public folder is, it'll treat everything inside of it as a static file.
That means, when we create our stylesheet links, the href will be relative to the location of the public folder.
                For a CSS stylesheet relative to the public folder:
                        "/styles/styles.css"
The reason we need to tell express the location of our public folder and set these files as static, is because the way that file paths work in Node and Express for dynamic pages is different from static pages.
    For example, on our website, if we have some nav links that go to different pages in the website and rendering different EJS files.
    But the way we're getting to these locations is by sending GET requests to a particular route.
    These dynamic parts of our website are routed and their locations are generated dynamically, whereas the static parts of our website, don't need to be generated dynamically and just specify the static folder they live in.
        And that's why we get our static files by specifying the public folder location in the middleware and then linking the files relative to the public folder.
Now that we know how to add back all of our styling and frontend code to style our websites, then you'll realize that in your EJS files, you end up with a lot of repeated code if you're going to have a multi-page website.
    Such as the head, header, footer are all going to be exactly the same throughout all the pages.
So to not have a ton of repeated code across all our EJS files, we can use some of the features of EJS.
We already know that we can use EJS for templating where we replace parts of our code using EJS tags in order to insert bits of dynamic content into the body of our code.
Now we can also use EJS to reduce a bunch of repeated code in our website
    Which we'd briefly seen using the <%- include("<fileName>") %> tags.
This can be done using Partials.
    Done using <%- include("<fileName>") %>
    So if we have a webpage with a main body of content and a constant header and footer, we can add:
                <%- include("heaader.ejs") %>
                content code
                <%- include("footer.ejs") %>
    This slots those files into the right positions.
This allows us to focus on what's going to change in terms of the content for the page.
Lesson Exercise:
    Do the usual project setup.
    Looking at the functionality of this program:
        There's a home page with a header nav bar, an animated footer and a styled body.
        But when we go to the about page and contact pages, we see they're completely unstyled.
    We need to look in the index.js steps and fix the parts of the website listed there.
Completed successfully with ease.


## 212. Band Generator Project:


