# Section 19: jQuery


## 149. What is jQuery:


jQuery is considered the most popular JavaScript library.
There are 1000s of JavaScript libraries out there, and more will be looked at later on.
    But none have been used or downloaded as often as jQuery.
If we look at some of the code from the previous section:
                for (i = 0; i<document.querySelectorAll("button").length; i++) {
                    document.querySelectorAll("button")[i].addEventListener("click", function() {
                        document.querySelector("h1").style.color = "red";
                    });
                }
    This is a lot of JavaScript for a relatively simple task.
jQuery makes it possible to shorten JavaScript code significantly so the above function becomes this:
                $("button").click(function() {
                    $("h1").css("color", "red");
                })
jQuery is a library, which is a bunch of code somebody else wrote that you can incorporate into your own projects and use to improve your own projects or make your life a lot easier.
Bootstrap was also a library.
What jQuery allows you to do is take a line of code:
                document.querySelector("h1");
    This looks through the DOM, selecting the document and querying for the h1.
    And with jQuery, we can instead simply say:
                jQuery("h1");
To be even shorter, the shorthand for "jQuery" is the "$".
                $("h1");
This is visibly shorter, makes our JS code easier to read, easier to debug and faster to debug.


## 150. How to Incorporate jQuery into Websites:


To get jQuery, we get over to the jQuery website and download all the jQuery code files through their download page, or can simply use a CDN.
    We'd previously seen that CDNs are Content Delivery Networks are.
    Check it out in the Bootstrap lessons.
The most popular option across the web is to use Google's CDN.
    As mentioned before, the greatness of using a popular CDN is that if a user has been to another website that uses the same CDN to fetch the jQuery library,
    then they'll likely already have it caches and saved in their browser.
    This means when they want to load up your website they won't have to fetch a fresh copy of jQuery, they've already got it loaded and ready to go.
    This in turn gives your website a much faster load rate.
We're going to be using the latest version of jQuery, (in the course: 3.3.1) which is 3.3.7.
    Copy the script tag from the Google CDN for the latest version of jQuery.
We're going to create a new project and are going to create a new project.
    Then linked the css and js files.
        Naturally test the links as well.
Now we adding a number of elements into the HTML
    See the files for these additions.
Now we'll write some jQuery code to change the colour of our h1 to red.
                    $("h1").css("color", "red");
    So if we haven't copied the jQuery cdn link into the HTML file, it won't do anything.
    Checking the console, we'd see that it's thrown an error as it doesn't know what "$" is.
So we'll copy the Google Hosted Libraries CDN link for jQuery over and paste it ABOVE the js file link.
    Now we'll see that the jQuery code will work just fine.
Where you place the jQuery script tag is really important.
    If we pasted it below the js file script tags link, it wouldn't work again.
        This is because the browser reads the code from top to bottom, and the first thing it'll try to process is our js file.
        Which contains the jQuery code that it'll try to execute, but it hasn't got the jQuery library yet, so it doesn't recognize the code.
    The other way it might mess up is that if you had both of the script tags inside the head section.
        Again it wouldn't work and wouldn't even provide an error.
        Need to be very careful about including the CDN script for jQuery in the head section, because what might happen is that before we've actually finished loading up the entire jQuery library,
            our index.js might already be trying to access it.
        A way to safeguard against this is to check whether our jQuery library is ready.
        We do this by running the following code:
                    $(document).ready(function (){
                        #("h1").css("color", "red");
                    });
            Here code will only be run once the document is ready.
                The code is housed inside of a callback function as this forces the browser to wait for the html document and the jQuery library to be ready before running anything.
When coming across websites, will often see the above line of code that waits for the document to be ready before loading it.
    An alternative of doing this exact same thing, is to include our scripts at the end of the website.
        Just above the closing body tag.
        This does exactly the same thing as the above line of code.


## 151. How Minification Works to Reduce File Size:


Now if we were to copy the link in the script that houses the jQuery library and load it in the browser, we'd get a bunch of spam.
    What this actually is, is a minified version of the jQuery library, and it looks very similar to the Bootstrap CDN we used previously.
Now if we took a section of the code and pasted it into a textfile where we could edit it, we'd see it's still the same code.
    CSS in Bootstrap, JS is jQuery.
What's happening essentially, is all of the spaces, the new lines, the comments, have been removed from the file to try and reduce its size.
    If we were to space out the lines, we'd see it's plain code.
We code go over to minify.org, where you could convert your CSS or JS code to a minified version.
    If we have to take some file and run it through this to minify it, we'd even see how big the file was originally and how big the minified version is, along with the storage savings in the minified version.
The reason to make the file smaller is so that it's quicker for the users to load.
    It always has to be loaded up by your users' browser, which you want to optimize as much as you can.
    Naturally internet speed affects this, but the browser doesn't care about tabs, indents, spaces etc.
    So it's okay to remove all of that and no point in having the user load all of that up.
If you were to download the jQuery library and open it, you'd see a standard version that is human readable.
    And there'll also be a minified version intended for the browser.
    This is to allow you to customize the code yourself and then minify it.
    Or if you don't want ot do any customization, then simply to just drop the jQuery file into your project.


## 152. Selecting Elements with jQuery:


The most basic thing we need to do when we're creating our websites is to select the elements in our web page in order to manipulate it at a later date.
    We'd already seen how to do this in vanilla JavaScript.
                        document.querySelector("h1");
    But if we were to do this in jQuery, we'd be able to remove a majority of this code and reduce it to:
                        $("h1");
        What we're now doing is using a jQuery method to select our h1, and we can see just how much shorter that is.
The functionality of the above jQuery code is very similar to querySelector in the sense that inside the brackets we're specifying the CSS selector that we would use if we wree to select our elements in CSS.
    This is becuase it's the most flexible, adaptable and also can be very specific.
        For example, it allows us to say things like:
                        $("h1#header");
        Where we select an h1 with an id of "header"
But what the jQuery selector allows us to do is when we're trying to select all of our buttons, if you remember from previously, we had to use code along the lines:
        document.querySelectorAll("button");
    But with jQuery the $ again replaces all of the code to:
                        $("button");
It'll select all elements matching the selector on screen and there's no difference between selecting one or selecting many.


## 153. Manipulating Styles with jQuery:


We've previously seen that we can manipulate the CSS style of a selected element by simply using the .css method from jQuery.
                            $("h1").css("color", "green");
    This method takes 2 input parameters, the property to change and what to change it to.
This method is really flexible, if we were to omit the second parameter, we'd instead get the current value of the property.
                            $("h1").css("color"); // outputs the rbg colour of the element.
So in effect, providing 1 input parameter to the .css() method means it works like a getter, return the value of the property provided.
    Providing 2 input parameters to the method means it works like a setter, setting the value of the property to the value provided.
But as we've covered previously, changing the style inside our JS code is not great.
    We need to ensure that our concerns remain separated, keep only behavior within our JavaScript.
So instead of adding the css directly, let's use a class inside the style sheet to add the styling, and add the class to elements in JavaScript instead.
    To do this, we'd write:
                            $("h1").addClass("big-title");
    Add then we'll see all the styles of the class applied to the element the class got added to.
Similarly, we can remove class as well:
                            $("h1").removeClass("big-title");
    Add we'll now see all the styling associated with the class no longer in effect on the element.
Now if you wanted to add/remove multiple classes:
                            $("h1").addClass("big-title margin-50");
                            $("h1").removeClass("big-title margin-50");
    Notice the classes are all inside one set of quotation marks and separated by a space.
Another useful method in jQuery is one we can use to see if a particular element has a class:
                            $("h1").hasClass("margin-50");
    It returns a true/false boolean based on the presence of the class in the element.


## 154. Manipulating Text with jQuery:


In order to change the text of a selected element using jQuery, there's two ways of going about this.
1) You can simply say:
                $("h1").text("Good Bye");
    Now as mentioned before, when using jQuery to select an HTML element, it selects all of the elements that match that selector.
    So if there are multiple elements matching your selector, each one of the matching elements will have their text updated.
2) Now when we learnt how to do this using vanilla JS, we had the innerHTML method that allowed us to modify HTML as well as text.
    But with jQuery it's much shorter and can be written as:
                $("h1").html("<em>Hello Again</em>");
        Notice the HTML tags that are considered by the browser as HTML in this scenario.
Notice that most of the things done in jQuery are implemented using methods, which we're accessing through the dot notation.
    When we learnt about methods and functions, we used it a lot to shorten our code and reduce repetition.
    This is effectively how jQuery works.
If you look at the library then you'll notice that jQuery is completely written in JavaScript, but it has all these methods that shorten the code that we need to write and 
    makes working with JavaScript to create our websites much quicker and easier.


## 155. Manipulating Attributes with jQuery:


Let's take a look at how we can use jQuery to manipulate attributes of HTML elements.
    Attributes are naturally things like the src and alt of an img element.
So if we wanted to get/set the attributes of an element using JS & jQuery:
                    $("img").attr("src");
    And if we wanted to set the value of the attribute:
                    $("img").attr("src", "./assets/images/image2.png");
    The only difference here is the presence of a second input parameter which the src attribute will now be set to.
Remember that class is also an html attribute.
    So if we were to get the class attribute of an element that has multiple classes, then they'll all be printed out in a string format.


## 156. Adding Event Listeners with jQuery:


Looking at how to event listeners to HTML elements using jQuery.
To add an event listener:
                    $("h1").click(function() {
                        $("h1").css("color", "purple");
                    });
Previously, if we wanted to add an event listener to all buttons in the page, we'd have to write a loop to go through them 1 by 1.
    But with jQuery, we simply need to write:
                    $("button").click(function() {
                        $("h1").css("color", "purple");
                    });
    jQuery goes ahead and selects all elements matching the query selector we input.
        So it'll add the click event listener to all the elements without the need of a loop at all.
We can also bind a keypress event listener to all the elements in jQuery using:
                    $("input").keypress(function(event) {
                        console.log(event.key);
                    });
    Notice here that we're capturing the event itself as well and outputting that in the function.
If we wanted to add the keypress event to the document itself, we can use either:
                    $("body").keypress(function(event) {
                        console.log(event.key);
                    });
    or we can use:
                    $(document).keypress(function(event) {
                        console.log(event.key);
                    });
Lesson challenge:
    Add an event listener to the body that changes the text of the h1 to whatever key was pressed.
There's an even more flexible way of adding an event listener to an element:
                    $("h1").on("mouseover", function() {
                        $("h1").css("color", "purple");
                    });
    This .on() method takes 2 parameters.
        The first is any of the events that you could be looking for, with it's name in a string.
        The second is the callback function that it should execute.


## 157. Adding and Removing Elements with jQuery:


While our website is live and running, we can actually use jQuery to add elements on the fly.
For example, if we selected the h1 and decided to add a new button BEFORE the h1, then we simply use:
                $("h1").before("<button>New</button>");
    In the brackets, we pass in the element we want to add as a text input parameter to the before method.
Vice versa to before, we can also create and insert an element AFTER an element:
                $("h1").after("<button>New</button>");
Then we also have prepend() and append().
Looking at prepend:
                $("h1").prepend("<button>New</button>");
    The difference between prepend and before is that prepend inserts the new element into the element you selected,
        just before the opening tag.
    So the button inserted here is inside the h1 element.
Looking at append:
                $("h1").append("<button>New</button>");
    Similarly, the append method inserts the button to just before the closing tag of the selected element, inside of it.
If you wanted to remove elements:
                $("button").remove();
    This removes everything that matches the query selector provided.


## 158. Website Animations with jQuery:


jQuery also makes it really easy to implement some common animations that you might want to do when creating your website.
So we could use the following to apply an animation that'll hide a selected element:
                $("h1").hide();
    You could like this to an event listener to hide the element on a button click.
If you wanted to show the element again, you'd use:
                $("h1").show();
And if we only wanted to toggle the hide/show of the element (switch it on/off with each call):
                $("h1").toggle();
Hiding is a very sudden event, it disappears, the element gets removed from the flow of our HTML, so everything else moves up.
    If we wanted it to be a little bit more progressive, then we can use something called fadeOut instead:
                $("h1").fadeOut();
    This causes the element's opacity to gradually reduce and then be hidden.
Then there's the opposite to fade out, fade in:
                $("h1").fadeIn();
The fade animations also come with a toggle, that fades the element out/in on each call.
                $("h1").fadeToggle();
There's also the slide up/down animations, the collapses and un-collapses the element:
                $("h1").slideUp();
Naturally there's a toggle varient of slide as well:
                $("h1").slideToggle();
    This is great for a drop down menu for example.
If you want more fine-tuned control over your animations, then instead of using the pre-built ones,
    you can use .animate, which let's you define some custom CSS that you want to gradually animate towards.
    Inside the brackets, you can add some {} which contains the css rules you want to slowly apply.
                $("h1").animate({opacity: 0.5});
    It's important to not that for the animate rule, you can only add CSS values that have a numeric value.
        You can't animate color, font-family etc.
        This is just between it's very difficult to create that kind of tween animation that gradually progresses 
        from one style to another using animate.
        But if you want to use percentages for the number value properties, you can pass the value as a string.
If you wanted to have more than one animation happening, you can chain them together.
    What this means is using dot notation to call one method after another:
                $("h1").slideUp().fadeOut().slideDown().fadeIn();
        This can be used with any of the jQuery animations.
    Remember, these chained animations down happen at the same time as conflicting animations like slide up and down can't be done at the same time.
        Instead, the animation methods are called in the order that they're called.


## End of Section 19.