# Section 23: Node.js


## 192. What is Node.js?


So we know from the previous section that we can use lots of different languages to write the backend of our web application.
    And similarly, depending on the language we select, we can find a compatible framework to go along with it.
But why do we need and use Frameworks, why can't you just write all the code from scratch using the chosen programming language and create your web server that way.
    It's true, you could write all of your own code from the backend instead of using a framework.
    BUT, because it's such a commonly used functionality, you might as well use the framework.
In that way, a Web-framework provides pre-built components and structures that can be used to build an application without the need for us to write every single line of code from scratch.
But looking at Node.js, it's actually not exactly a framework.
    It's " An asynchronous event-driven JavaScript runtime, Node.js is designed to build scalable network applications."
        This quote according to Node.js itself/themselves.
Breaking down the above quote:
    It's a JavaScript runtime:
        But what is a runtime environment?
            It's important to remember here that when JavaScript was first created, it was designed to run in the browser.
            Meaning it was impossible to use JavaScript to write any kind of program that's not a website,
            But Node uses the V8 engine, which comes from Chromium, is written in C and C++.
                It's incredibly fast and powers the Chrome browser.
            We know that we can write JavaScript code to run in the browser and to provide functionality our websites,
                but in many ways, the JS code that we have is locked in the browser.
            But when Node came along, it free the language out of the browser-lock and allowed us to use it to write any sort of application, desktop or server side.
                Whether it's desktop or server-side.
            And this is in the form of the JavaScript runtime environment.
        Now that Node provides us with this JavaScript runtime so that we can run JavaScript on a machine such the local computer.
            It means we can use JavaScript to accomplish anything that other server-side languages like Ruby, PHP, Python etc can do.
            But also maintaining our full JavaScript stack from frontend to backend.
    It's Asynchronous and Event-driven:
        Asynchronous means that your JavaScript code doesn't have to do everything sequentially.
            Looking back to the scripts that we've written before, our code kind of runs from top to bottom.
                We can have some functions, but essentially everthing is going to happen from beginning to end in a synchronous way.
            Synchronousity effectively means that your computers resources are tied up until some sort of event resolves.
                All the scripts we've previously written thus far have effectively been scynchronous.
        Node is Asynchronous and Event-driven.
            Meaning the resources that would normally be tied up waiting for an event, are instead now freed up to do something else until the event resolves.
            Only then would it run the next blocks of code.
        Effectively, we can parcel up these bits of code into an event so that we know that our code can be triggered when the event happens.
In summary, the reason why we need Node is becuase it allows us to build an application on a computer using JavaScript.
    As we saw earlier, the application is a key aspect of our backend.
This application will be running on our server, and that server, is just a computer, not a browser, and Node.js is what allows this to happen.
Using Node.js also means that both our frontend and backend will comprised of JavaScript (save for the HTML and CSS).
    Meaning we're using JavaScript everywhere inside our web application across the entire stack.
It also means we only need to be familiar with one language and then code can be shared between the client and server side.
Node.js also allows for easy Scaling of applications, making it really good for large-scale professional projects.
    It's fast and non-blocking.
        Because of the asynchronous and event-driven nature of Node, it can be really fast and efficient instead of having to wait for things to happen or blocking the resources.
    It's got a huge ecosystem.
        It's got a really vibrant community and people have contributed thousands of open-source modules and packages to the Node Package Manager, which allows us to easily add functionality to our own applications.
        But it also means there's a lot of resources out there in terms of documentation, tutorials, help, people on StackOverflow to answer questions etc.


## 193. Install Node.js on Mac:


This lesson provides a guide on how to install Node.js on a Mac computer.


## 194. Install Node.js on Windows:


This lesson provides a guide on how to install Node.js on a Windows pc.


## 195. Using Node.js:


With Node successfully installed, let's look at how we can use it to start creating applications.
We can check the version of Node that we're running by typing "node -v" into our terminal.
    Note that we're working with a more recent version of Node here.
Now we need to learn to use the Node REPL.
    Which stands for: "Node Read Eval Print Loop"
    This is not unique to Node.
    The REPL "is a computer environment where user inputs are read and evaluated, and then the results are returned to the user."
        These users inputs we put in are in the form of code, and what we write is read by the computer and evaluated line by line, and then it prints out the result back to us in the command line or in the console.
To initiate the Node REPL, all we have to do is type the command "node".
    Running this command in the terminal, we'll get a "Welcome to Node" greeting, and the symbol before the cursor will change to a ">"
    This symbol tells you that you've successfully entered the node repl.
In the Node REPL, what we're going to do is type commands such as .help
    This gives you some of the other commands that you can use.
    The most important one, because often the hardest thing with REPLs is how to exit them, is the ".exit" command to exit the REPL.
Running ".exit", we'll symbol changes back from the ">" again to whatever other symbol was previously in the terminal.
    Alternatively, you can press "CTRL + C" twice to exit the REPL as well.
CTRL + C is usually the way to get out of anything in the command line.
Now inside the REPL, let's try to do a Read Eval Print Loop.
We'll write a simply "5 + 8" and run it.
    It Read the code, Evaluated the Code, Printed the output, and Looped back to a new line for the next command.
Remember that Node is a JavaScript runtime, so you can write anything that is JavaScript.
    For example: "let a = 3" then "a + 12"
Let's look at how we can write a JavaScript file and use Node to run the entire file.
    Because as useful as a REPL is in the command line, what we actually need to do is to write full code files and to use node as the runtime environment.
So we'll create the file, enter a basic line of code that prints to the terminal and save it.
    Next we want to first navigate to the folder that our file is in, in the terminal.
        Note in VS code we can drag a folder into the terminal to generate the absolute file path for that folder in the terminal.
    Now that we're in the file's directory, we'll type in the "node" command.
        But this time, we'll also type in the name of the file.
        So the command will look like this:
                    "node index.js"
Something a lot of developers do when they are trying to access different files etc is use the tab key to autofill the rest of the file name in the terminal.
    This saves time and also confirms you're in the right directory when trying to run the file.
    Now when we run the above command, we'll see that Node found the file and used the Node runtime to run the code inside index.js.


## 196. How to Use the Native Node Modules:


In this lesson, we're going to look at how to use Native Node Modules that will allow us to leverage existing code that's been built into Node that makes it way more powerful than just what you can do with JavaScript.
The Native Node Modules are like a starting tool set.
    We've mentioned that Node has a whole bunch of features built into ti just so that it was able just so that it was able to make it easier for you to create applications, especially on the server side.
        And the code that was written in order to amke this easier inludes things such as a File Access.
            So reading and writing into the local filesystem.
            That could be local on your computer or in the case of your web application, it will be onto server computer.
        It also has things such as Networking in order to reach across the internet and carry out certain bits of functionality that's important for the backend of a web app.
    Essentially, you can think of these native modules as kind of like that games that come pre-bundled with your operating system.
In the course resources, is a link to the Node.js documentation: https://nodejs.org/docs/latest-v18.x/api/index.html
    This linked page documents all of the native modules.
    We'll be using some of these modules in the future, but otherwise would have to explore this in your own time.
The one we'll be looking at now is one of the most important and basic features of Node, and it's the File System.
    With native JavaScript run in a browser, you can't access a user's files on their computer, it would be chaos.
    But in the case of Node.js, because it liberates JavaScript out of the browser, we're able to use it to access, to read and write to files on the server, or in this case, to our local computer.
Looking at the File System, it's a native Node moduel that allows us to access the local storage.
    And in order to start using it, we need to either import the code from the file system module, or we can "require" the bits of code that we need from this module.
For now, we'll use the CJS (CommonJS) pattern in order to get hold of the methods that we need from this File System module.
    There's also the ESM pattern, but that will be looked at in a lesson that's to come.
We'll need to download the starting files for this module, and it will be saved into the associated lesson files folder.
Now the index.js file is a blank JavaScript file, but it's in here that we're going to get ahold of the File System module.
    So in this file we'll create a constant called "fs" and set it to the function require().
    This function will take the module we need as a string parameter.
                        const fs = require("fs")
        Each module has a predefined name for the string that will come up in the autocomplete.
        We're looking for 'fs', short for File System.
Now that we've gotten hold of this module, we're going to use one of the methods in that module.
    We're looking for fs.writeFile(), because this lets up take a message from the user/website and write it into a file to be saved onto the computer.
    This method takes a number of parameters.
        The file that we want to create.
        The data that we want to put in that file.
        The callback to handle any errors or any issues.
In our file, we can type:
                        fs.writeFile("message.txt", "Hello from Node.js", (err) => {
                            if (err) throw err;
                            console.log("The file has been saved!");
                        });
Note that with this method, if we don't provide any pathing and just the filename, it'll be saved into the same parent folder as the JavaScript file the code is being run from.
For the callback, we could just copy what's in the documentation for the method example.
    Remember the callback is simply the callback function here.
Now if we hit save and cd over into the folder and run the index.js file in Node, we should get a message in the console that the file has been saved.
    And then in the same directory, we'll see the file has been created and has the text data saved inside of it as well.
Lesson Challenge:
    Instead of just writing from a file, you can also read from a file.
    So we'll need to use the readFile method to read the content of the message.txt file and print it to the console.
    Simply, same structure as the writeFile method, but this time the callback has 2 parameters, error and the data read from the file.
        Need to also provide the file's encoding so that the data can be correctly read.
    It seems the scope of variables didn't work as couldn't extract the data out of the block using a pre-defined variable.


## 197. The NPM Package Manager and Installing External Node Modules:


We'll now be looking at the Node Package Manager (aka NPM) in order to get access to the world of open source node packages.
The Node Package Manager is basically a place that collects modules that people have built for Node and it's created by the GitHub organization.
    It's a great place to find code that other people have written with utilities and tools to help you with writing your Node applications.
If we think of the Native Node modules as the toolbox at home, then NPM is the place to find all the exotic tools you didn't realize you need until you do.
NPM is like a community tool library.
    It's open source and you can search to find all the packages that other developers have created.
    Tools they've written the code for that they think might be useful in the future, so that you don't have to duplicate the work and write everything from scratch.
NPM comes pre-bundled with Node, so if you have Node installed, you will also have NPM installed.
Let's look at initializing our first project and see how we can configure our project.
    Need to download the course resources for this lesson and they're loaded into the associated lesson folder.
First, we're going to initialize NPM.
    To do that, we first cd into the folder the file is in.
    Then we run the command:
                    "npm init"
    Running this command brings up the initialization utility, which is going to help create our configuration file, called "package.json"
    It'll ask a number of questions and we simply need to type the answers.
        First it asks for a package name (in this lesson: learning-npm)
        Then it asks us for the version, which we'll leave as 1.0.0
        Next is asks for a description (this lesson: Learning about NPM)
        Entry Point, we'll leave as index.js
        Test command: leave empty
        git repo: empty 
        keywords: empty
        author: Michael Geel
        license: default
    Once the questions are done, it'll show the generated json configuration file for the project.
        It'll ask us if the json is okay, we type Y for yes.
Now we'll see a new file has been created in our folder, called the package.json.
    JSON is a way of representing our data.
    JSON stands for "JavaScript Object Notation"
    Can see it's very similar to the way JS objects are structured and it's just key/value pairs describing all of the info that we've entered just now.
To install an NPM package, we run the following command in the terminal:
                    "npm install <packageName>"
    These packages can be found by going over to npmjs.com where you can search through all available packages.
    You need to know what it is that you want to do when searching for packages.
Looking at a package called "sillyname".
    Just a random name generator.
    This package will be used to learn important concepts like:
        How to find a package
        How to install the package
        How to use the installed package.
To install any of the npm packages, you'll find the command in the package page in npmjs.com
    For the above package, it would be:
                    "npm i sillyname"
    Once the command is pasted in, you'll see it's actually a shorthand.
        "npm i" is short for "npm install"
    Becuase you'll be using this command very frequently when using Node, it makes it easier to use this shorthand.
In this case, we're only installing a single package.
    But if you wanted to install multiple packages, you could list them all out with a space between each one.
Once the package is installed, we can check the package.json file and we'll see a new section has been added called "dependencies"
    It's saying our project now depends on this npm package.
    In addition, we've got a folder called "node_module" that's downloaded all of this code from the npm repositories for the package.
    And if we look inside the folder containing the package code, at the index.js file for the package, we can see all of the code the package creator wrote so that we can use this functionality in our project without having to write all of this code.
Going back to the package home page in npmjs, we can see some examples of how you can use the package.
    The first thing you can do is require that package.
                    let generateName = require("sillyname");
    Then you can call the method that comes from the module.
                    let sillyName = generateName();
    Then we just console.log the sillyName to see what it generated.
JavaScript has what's called "String Interpolation"
    This allows us to insert variables directly into strings.
    To achieve this, we use back-ticks (``) instead of quotation marks.
    Then wherever we want to insert a variable, we encase the variable with: ${}
    For example:    console.log(`My name is ${sillyName});
There is a concept to look at now called ECMAScript Modules.
    In the previous lesson, we looked at the native node modules.
    When we looked at how to get ahold of the File system package, specifically the example code, we saw a toggle.
    The toggle was between "CJS" and "ESM"
        CJS stands for CommonJS, which was the method using require that we've used thus far to get ahold of Node modules, Native Node Modules or even NPM Modules.
    However, since version 12 of Node, we've moved on from this and Node is now enabled to use ECMAScript modules.
        So instead of using require, we can use the "import" keyword.
        Note the ESM stands for "ECMAScript Modules"
    This basically provides a standardized way of using JavaScript to be consistent on the front-end and the back-end.
        It also improves things through tree shaking and a whole unch of crazy things behind the scenes.
To be able to upgrade our project to be able to use ESM with Node, we need to go into the package.json.
    Remember this file acts as a configuration file for our project.
    What we can do is find a location, ideally right under the "main": "index.js" parameter.
        Here we'll add in a string called "type" and the type of project we're going to use is going to module-based so that we can use our imports and use ESM instead of the default.
        And the default is the CJS 
    To make the change, add:
                    "type": "module",
Now we can convert the require line into the new import format:
                    import <method/object to import> from <"package/module of origin">
    So it's the import keyword, followed by the methods and objects we want to import.
    Followed by the from keyword and then the package/module it comes from, in string format.
    For example:
                    import generateName from "sillyname";
A trick to the import line is to leave out the method or object, write the rest as:
                    "import  from "sillyname"
    Because by doing this, when you go back to write the name of what you want to import, you get autocomplete support from VS Code.
    If you write it normally, you don't get autocomplete because vs code won't actually know what you're looking for.
Lesson challenge:
    Find an npm package called "superheroes"
    This package lets us generate a random superhero name.
    The challenge is to install the package into the same project and file.
    Then console.log the superhero name generated with the package.
Note: when importing things from a package/module be sure to encase the imports in {}:
                    import {} from "superheroes";
    If this isn't done, then the function isn't recognized when running the code.    
Note, the code package has changed since the creation and update of the course, so the solution differs to what is shown in the course.


## 198. [Project] QR Code Generator:


