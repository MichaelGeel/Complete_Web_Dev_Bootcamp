# Section 21: The Unix Command Line:


## 185. Install Git Bash on Windows:


Note Macs come with Git Back pre-installed.
This course has a link to download Git SCM for windows.
Then run the installer.
    Ensure Git Bash Here is checked in the installer.
Leave the folder as Git and leave everything else as default all the way until you can install Git.
Then to check that it works, open up a new terminal in VS Code.
In the new terminal, click the dropdown button, next to "powershell" in the top right corner of the terminal.
    This should have our cursor on a newline next to a $ symbol in the terminal.
To configure VS Code to make Git Bash the defualt shell, we need to go to the command palette.
    Can be found at View -> Command Palette
    Then we'll search for "Terminal: Select Default Profile"
    After selecting that, we select Git Bash.
Now every time a new terminal is openeing, we're working with Git Bash.
And now Git Bash has been set up.


## 186. Understanding the Command Line. Long Live the Command Line!


The Command Line is an incredibly useful tool no matter the genre of development you're persuing.
To know what the Bash shell is, we first need to know what a shell is.
    If you think about your operating system as a Peanut...
    Then the Kernel is the actual nut.
In computing, the Kernel refers to the actual programthat interfaces with the hardware.
    It's the core of your operating system.
The Shell refers to the user interface for you as a human to be able to interact with the kernel and in turn with the hardware of your computer.
There are 2 variants to the shell.
    There are Graphical User Interface (GUI) shells 
        such as using Windows Explorer to browse your files using folders and icons
    Then there's also the Command Line Interface (CLI)
        Which is what we're focusing on here.
This CLI is an alternative way of interfacing with the kernel.
BASH in Bash Shell is an acronym that stands for:
    "Bourne Again Shell"
    Named after a Mr. Bourne.
The BASH shell is a CLI (Command Line Interpreter) for the Unix system.
    You find Unix-based systems or Unix-like systems all over the place.
For example, Linux is a Unix-like system and a lot of servers will run on Unix and even Mac OS runs on a Unix-like OS.
    This is a completely different family from the Windows side of things, which uses DOS and Windows.
A lot of things that you can do with the command line can be done using the GUI.
So the reason we still use the CLI or Command Line is because we get greater control from using it.
In your journey of becoming a better developer, you will need to understand and exert more power over your tools (the computer hardware.)
On a more day to day basis, you'll find that if you're a regular command line user, that it's actually easier and faster to do a lot of really common things.
    For example, to make a music folder, you simply go to the directory you want it in, and then run the command:
            "mkdir Music"
    Whereas in the GUI, you have to go to the explorer, nav through your GUI to the directory then right click new folder and name it, which is more effort.
So using the CLI is mainly about speed and control.
But another aspect is that the CLI tries to hide a lot of the complicated and unnecessary stuff (like configuration files) from the common user.
    The idea is that, unless you know how to deal with it, then you probably shouldn't be dealing with it.
You can also make secret files and folders that wouldn't normally be visible to the common user either.
Later on when we learn git and version control, we'll be using the command line heavily to show you the easiest and probably the most popular way amongst developers of using git and version control.


## 187. Command Line Techniques and Directory Navigation:


The first command to look at today is:
                "ls"
    Which stands for LiSt files and directories.
    It lists all the items inside a particular directory.
    Whatever appears before the tilde (~) in bash shows you what directory you're currently sitting in.
        The ~ only appears if you're in the root directory.
    Running ls returns all the folders and files in the directory you're currently in.
Now if you wanted to go into a different directory/folder, you'd use the command:
                "cd"
    Which stands for Change Directory.
    This lets you navigate into/out of folders in the directory.
    Now there's an auto-complete feature in the terminal as well.
        Say we wanted to navigate into the Documents folder.
        We could write "cd Documents"
        But with the autocomplete, we could just write "cd Doc" and hit tab and it'll autocomplete the rest of the folder name for you.
        But you need enough letters for it to understand.
            For example, "Do" could lead to Documents or Downloads, so it wouldn't know which to autocomplete to.
    But once running the cd command, it takes us into the folder we commanded the terminal to open (ie inside the documents folder)
    We can also jump levels, if we knew the entire path.
        So we could use cd ~ to return to the root directory.
        So from root, if we wanted to go to the Documents - Learn - Languages folder we could use the command:
                "cd Documents/Learn/Languages"
        And this would take us all the way into the Languages folder.
            This is much quicker than navigating through the folders one by one.
Another great feature of the terminal is the up and down arrows.
    If you wanted to use the last command that you typed, all you have to do is just hit the up button and the previous command will repopulat in your terminal.
    Naturally, if you go too far up and past the command you're looking for, the down arrow key allows you to cycle down to it again.
If you're in a given directory, if you want to go backwards in the path to the parent folder, use the command:
                "cd .."
    The .. means to go up a level in the file path.
    And if you want to go up multiple levels you can add more ".." separated by / for each level:
                "cd ../.."
        This goes up 2 folder levels.
Now naturally typing out entire file-paths can become quite the chore, so if you're going deep into a directory there's a shortcut you can use if you have the Finder/Explorer open.
    The shortcut is to drag the file/folder icon from the explorer/finder into the terminal and the path to that folder/file gets auto-populated into the terminal.
        So you could type "cd " and then drag the folder directory you want to go into to get the full path and you'd be able to then immediately navigate to that directory.
This is useful because you can't navigate to a different directory that's outside of the one you're currently in.
    Anything directory name you type in will be searched for within the directory that you're currently inside of.
    So if you wanted to go backwards in the directory, you'd have to specify the entire file path to go backwards, and can only specify the file name if you're going forwards.
Now if you wanted to edit from the middle of a command (say you misspelled something in the middle of the command)
    The terminal doesn't allow you to click and move your cursor to the spot you want to correct or change.
    Now you can naturally use the left arrow to move left and right arrow to move right character by character.
        But that takes forever.
    A trick for this is to hold the Option (mac) or Alt (windows) button and that turns your cursor into a plus symbol and you can click somewhere in the command and your cursor will be moved to that point.
Now if you're aiming to never have to touch the mouse, that is possible.
    For example, holding CTRL + A takes you to the beginning of your command line.
        And holding CTRL + E takes you to the end of your command line.
If you wanted to clear a command currently typed out without executing it, you'd press:
                "CTRL + U"
    This clears the entire line and allows you to start over in typing it out.


## 188. Creating, Opening, and Removing Files through the Command Line:


If we want to create a new folder in our directory using the command line, we'd run the command"
                "mkdir <directory name>"
    mkdir stands for MaKe DIRectory.
    And naturally it is followed by a name for that folder.
If we navigate into the folder, and run ls, we'll see, like any new folder, that it's completely empty.
Now if we wanted to create a new file inside this directory, then we'd run the command:
                "touch <filename>.<extension>"
    And this creates a new file with the given extension inside of the working directory.
If we wanted to open the file from the command line we'd run:
                "open <filename>.<extension>" (This command is for mac users)
                "start <filename>.<extension>" (This command is for windows users.)
    And this will open the file using the default application for the file type.
You can specify what application you want to use to open the file as well.
    To do this, we'd instead run:
                "open -a <application executable path> <filename>.<extension>" (For mac users)
                "code <filename>.<extension>" (For windows users)
    Note the code command is unique to opening the file in VS Code and for the mac version you'd provide the file directory to the VS Code executable.
Now if we wanted to delete files in the command line, we'd run the command:
                "rm <filename>.<extension>"
    rm stands for ReMove file.
    And that deletes the file you specified.
If we wanted to remove ALL the files inside a working directory, we'd run the command:
                "rm *"
    Note you need to be INSIDE the directory you want to remove all the files from.
        To check this, you can use the following command:
                "pwd"
            Which stands for "Print Working Directory"
            And it returns the path of the directory that you're working in.
    The * is a wildcard that matches to everything in the working directory.
Note that in using the CLI, the GUI isn't there to protect you anymore.
    So for example, if you were not inside the directory you wanted to delete from, say you were inside the root directory, you'd delete your everything.
    Which is a bad time.
        So it's a good idea to DOUBLE and TRIPLE check before doing a destructive command of any kind.
To remove folders or directories, there a different command, which is:
                "rm -r <directory name>
    The flat rm command doesn't work on it's own, which is why we have to add the "-r" flag to allow it to remove a directory.
    Note that this deletes the directory, along with all files and folders that were within that folder.
To expand further on the Command Line, check out this course: https://www.learnenough.com/command-line


## End of Section 21