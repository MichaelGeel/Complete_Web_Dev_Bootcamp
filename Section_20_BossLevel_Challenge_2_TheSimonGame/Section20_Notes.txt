# Section 20: Boss Level Challenge 2 - The Simon Game


## 160. What You'll Make: The Simon Game:


This challenge section is to build a game that is modelled off the game "Simon".
The way the browser game works is:
        You can press any key to start.
        It'll then show you a tile that you have to click on.
        As you go from level to level, the patterns get more and more complicated.
        At some point, you're going to get it wrong.
        When you do, it'll tell you that you got it wrong and you can press any key to restart the game.


## 161. Play the Game:


This lesson simply provides the link to play the game and try it out:
            https://londonappbrewery.github.io/Simon-Game/


## 162. Step 0 - Download the Starting Files:


This lesson contains the starting files for this challenge.
However, for practice I'll be attempting to code this app from the start.
The starting files contain the html, css and sounds for the project.
Prior to going any further into the lesson, I'll be completing the project first.
The project has been completed successfully, only required playing the game to analyse the mechanics in place.
Could have improved functionality and prevented a keypress event duplication bug by preventing checks from occuring if a button was pressed while the game was not active.


## 163. Step 1 - Add JavaScript and jQuery:


This step covers creating the external JS file, linked it and doing a hello world to confirm it's correctly linked.
We also add in the link to load jQuery and test whether it has loaded correctly as well.


## 164. Step 1 - Answer:


This lesson simply contains the code file updated with the solution for Step 1.


## 165. Step 2 - Create A New Pattern:


This lesson details creating a new pattern for the simon game.
We first generate a random number between 0 and 3 (1-4) and store it in a variable. (Do this as a function)
We then create an array that houses the 4 colours in a set order (red, blue, green yellow).
Using the generated number as the indexer, we map our random number to one of the 4 colours.
Then we create a global array variable that houses the randomly generated colours, and add the randomly chosen colour to it.


## 166. Step 2 - Answer:


This lesson just contains the updated code base with the solution code for this particular step.


## 167. Step 3 - Show the Sequence to the User with Animations and Sounds:


