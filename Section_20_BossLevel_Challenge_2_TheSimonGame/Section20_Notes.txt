# Section 20: Boss Level Challenge 2 - The Simon Game


## 160. What You'll Make: The Simon Game:


This challenge section is to build a game that is modelled off the game "Simon".
The way the browser game works is:
        You can press any key to start.
        It'll then show you a tile that you have to click on.
        As you go from level to level, the patterns get more and more complicated.
        At some point, you're going to get it wrong.
        When you do, it'll tell you that you got it wrong and you can press any key to restart the game.


## 161. Play the Game:


This lesson simply provides the link to play the game and try it out:
        https://londonappbrewery.github.io/Simon-Game/


## 162. Step 0 - Download the Starting Files:


This lesson contains the starting files for this challenge.
However, for practice I'll be attempting to code this app from the start.
The starting files contain the html, css and sounds for the project.
Prior to going any further into the lesson, I'll be completing the project first.
The project has been completed successfully, only required playing the game to analyse the mechanics in place.
Could have improved functionality and prevented a keypress event duplication bug by preventing checks from occuring if a button was pressed while the game was not active.


## 163. Step 1 - Add JavaScript and jQuery:


This step covers creating the external JS file, linked it and doing a hello world to confirm it's correctly linked.
We also add in the link to load jQuery and test whether it has loaded correctly as well.


## 164. Step 1 - Answer:


This lesson simply contains the code file updated with the solution for Step 1.


## 165. Step 2 - Create A New Pattern:


This lesson details creating a new pattern for the simon game.
We first generate a random number between 0 and 3 (1-4) and store it in a variable. (Do this as a function)
We then create an array that houses the 4 colours in a set order (red, blue, green yellow).
Using the generated number as the indexer, we map our random number to one of the 4 colours.
Then we create a global array variable that houses the randomly generated colours, and add the randomly chosen colour to it.


## 166. Step 2 - Answer:


This lesson just contains the updated code base with the solution code for this particular step.


## 167. Step 3 - Show the Sequence to the User with Animations and Sounds:


We'll start this by using jQuery to select the button with the same id as the chosen colour (or class).
Need to then google how to animate a flash to the button selected in step 1.
Need to also then google how to play the sound for the chosen button as well (note each button has a unique sound)
The hint for the flash of the button links to this:https://stackoverflow.com/questions/275931/how-do-you-make-an-element-flash-in-jquery
        Which provides some alternative solutions however it was successfully solved.


## 168. Step 3 - Answer:


Updated code base files with solution for Step 3.


## 169. Step 4 - Check Which Button is Pressed:


Notes from 168 solution:
        Remember can use string concatenation for file access to not need to switch for each case.
        And can also use an array to store values instead of switching between cases based on a number.
                Just keep the range 0-x and then use that as an index.
Add click events to each of the buttons to detect when they're pressed.
The function each button triggers will use the event data to store the id of the clicked button, providing the colour.
We also create a global user click array that stores the sequence of user button clicks.
Then when a button is pressed, the colour of the button is added to the user click array.


## 170. Step 4 - Answer:


Updated code files with the solution for Step 4 included.


## 171. Step 5 - Add sounds to Button Clicks:


Now we need to add sounds for when a user clikcs on a button.
        Using the corresponding sound for the colour in question.
We'll create a playSound function that takes in a parameter that is the button's colour and it calls the correct sound.


## 172. Answer:


Contains the updated code base with the answer for lesson 172.


## 173. Step 6 - Add Animations to User Clicks:


Create an animatePress function taking the button colour in as a parameter.
Use jQuery to add the pressed class to the button that got pressed.
Then use a setTimeout to remove the class shortly after to simulate a press.


## 174. Step 6 - Answer:


This lesson contains the answer code to Step 6.


## 175. Step 7 - Start the Game:


Add a keypress event to the document, which calls the function to generate a random button.
Add a level variable that tracks the user's level.
Alter the h1 to show what level you're on. 
Include functionality to increment the level.
Ensure to update the h1 on level increase.


## 176. Step 7 - Answer:


This lesson contains the answers to Step 7, lesson 175.


## 177. Step 8 - Check the User's Answer Against the Game Sequence:


Create a checkAnswer function that receives one input
Call this function whenever a user clicks a button, and pass the index of the last user answer to the function (ie the user press list length -1)
        Also technically the button the user pressed last.
Then compare the user input to the button generation for that same index.
If right, then check if they've finished the sequence.
        If yes, then begin the next sequence level.
        And reset the user input array.


## 178. Step 8 - Answer:


This lesson contains the answer code to step 8, lesson 177.


## 179. Step 9 - Game Over:


Play the wrong.mp3 sound if the user gets an answer wrong.
Apply the game-over class to the body and remove again after 200ms if user gets answer wrong.
Change h1 text to reflect game over text.


## 180. Step 9 - Answer:


This lesson contains the answers to step 9, lesson 179.


## 181. Step 10 - Restart the Game:


Create a new function called startOver()
Call this function if the user gets the sequence wrong.
In this function, reset the values of level, gamePattern and started variables.


## 182. Step 10 - Answer:


