# Section 24: Express.js with Node.js:


## 200. What is Express?


The Express framework is built ontop of Node and is going to help create our backends.
    Looking at all frameworks in existence, Express ranks #4.
Now while the backend framework that JavaScript uses is considered to be Node, it's not actually a framework.
    Instead, Node is a runtime environment.
    And runtime environments simply enable us to use JavaScript on the computer and not exclusively within the browser.
But Express, is a JavaScript framework that allows us to create backends for our websites.
    Node and Express combined is how most professional developers create their backends.
We need Express because Node is too powerful and all encompassing.
    You can use Node to do a lot of things because all it does is allow us to run JavaScript on any computer, meaning it can be used to do many things.
    You can use Node for your backend, but you can also use it for coding IoT devices and desktop apps (such as VS Code).
When we have a tool or language that allows us to do many things, it's generally not very specialized for doing one thing.
    And right now, the only thing we want to do is create a website backend.
That's where Express comes in.
    It allows us to use JavaScript and Node to create our website backend, but it is much better and makes it much quicker and easier.
Looking at an example:
    Using Node to create very simply website, takes about 21 lines of code with just Node.
        The code is complicated, busy and hard to understand.
    Now achieving the exact same end result using Express and Node, we now only need 14 lines of code.
        Not to mention the code is much sparser, leaner and easier to understand.
For backend purposes, using just Node to create a website is borderline pointless.
    In almost all the cases, when we're creating a backend using node, we're going to be using Express becuase of all the advantages we get:
        Readability
        Less code to write
        Add middleware (explained later)


## 201. Creating Our First Server with Express:


Remember the backend of a website is simply a big, powerful computer that's on 24/7 and it's always listening for any requests, looking for a particular resource.
    Resources such as the HTML, CSS, JS etc.
The backend also consists of an application writting in some sort of code, running on the server computer.
    This could just be an index.js file that is on this server computer.
The backend usually also has a database, but this is usually in the case where you have a more complex backend, a more complexd website where you have user or company data etc.
A very simply backend can just be an application running on a server computer.
When a client, which in most cases will just be a user trying to access your website, will go via the internet to reach your server and make a request for the website they want to look at.
    Then the request goes through the internet to the servers somewhere in the world, and on this server, there's an application that's running and listening for this particular request.
    Once it finds what the request is looking for, it'll send back the response to the request to the client.
In most cases, you'll hear people refer to the Client-Side as the Front-End facing side.
    The side users are going to access and interact with.
And the Server-Side, refers to the Back-End.
    Sometimes, people will refer to the computer, application and database collectively as the server.
We're going to try and build our server using Express.js.
    That means we're going to be creating an application in JavaScript using Express and Node.
    Express will use Node so we don't have to interact with the code inside Node.
We'll be using our local computer as our server.
    And the "server" will only be up and running when we want to test and make requests to the server side to retrieve website data.
There are 6 steps to creating an Express server:
    Create a directory.
        A folder that will house all our project files.
    Create the index.js file.
    Initialize NPM
    Install the Express package.
    Write Server application in index.js
    Start server.
Looking through these steps one at a time:
    Directory folder for this lesson will be in the associate lesson folder.
        We'll then navigate to that directory in the command line.
    Next we'll create our index.js file in the directory.
    Now we need to initialize NPM.
        Ensure you're in the correct directory when running this command.
        It's important to have the "main" key here be set to index.js and that your js file matches that name.
    On to installing Express.js 
        It's a good idea to go to the express.js website to have a look at their documentation for the package there.
        This can be done with the command "npm i express"
        Once it's done, will see the node_module folder along with a number of dependency packages installed.
        And inside package.json, express will show up as a dependency.
            While checking this, we'll also upgrade our project ot change the type of project to module.
            This will enable it to use the ES6 latest syntax.
    Now we can open our index.js file and write our server application.
        The starting code for creating our first server is:
                        "import {express} from "express";
                        const app = express();

                        app.listen(3000, () => {
                        console.log("Server running on port 3000.");
                        });
                        "
        So we're importing express from the express module.
        Then we're creating an app using the express object we imported.
        Once the app is created, it has a method called "listen" which takes 2 parameters:
            Fist, the port, which is the location on our server where we're going to be listening for requests from the client.
            Second, the Callback Function that will be triggered when our server is set up.
                As soon as our app is listening on port 3000 and everything is done, it's going to trigger this callback function.
        In the above code, we can hard code the port number (3000) into app.listen.
            But another format, which is better practice is to create a constant the we assign the port number to, and instead reference that constant in the app.list()
        All this code is doing right now, is setting up a server using express, and that server is going to listen on our port, which is 3000
            Once the server is set up, we'll notify ourselves in the console that it is running.
        The only remaining step is to go ahead and start the server.
            Which we can do with the node index.js command.
            Even though we don't see any node in the code, we are creating a node server, and that's because Express is doing all the heavy-lifting and simplifying things for us.
When we run the index.js file, we'll see in our terminal a message saying "Server running on port 3000"
Now to reach our server, in our browser, we can enter the URL:
                        "localhost:3000"
    And this is the location of our server.
When the page loads up, we can see we got a response back from the server.
Now let's understand what localhost is.
    It's simply when we don't have a server on the internet, and instead want to host the server locally.
    Making our own computer the server of our website's backend, which is where the local part of "localhost" comes from.
    In the full url:    "https://localhost:3000", the 3000 is the port we're trying to reach our computer on, and
        https://localhost is the computer itself.
The port is equivalent to a door on the server computer.
    There are thousands of doors you can create to access your computer.
    In the case of our server that we've set up, we specified that the door/port we want to be listening on is 3000.
    Once we've set up our server to be listening on that particular door, then when we try to access localhost:3000, then it's going to look on our computer to find that port.
        Through that door, it can reach into our computer and find the application listening for a request.
The reason why there are many ports on the computer, is because it has to be able to listen for different incoming requests.
    Becuase each port is identified by a unique number, then different services or applications can tap into a partiuclar port.
    This way we can have multiple services running through the same computer without them interfering with each other.
We can check which ports on our computer are listening for interactions from the outside.
    On windows, we type the command: netstat -ano | findstr "LISTENING"
    On Mac/Linux: sudo lsof -i -P -n | grep LISTEN
Going back to VS Code, looking at the terminal, we can see it doesn't have the usual prompt, just an empty line with the cursor in it.
    This is becuase the server is currently running and occupying the terminal.
    If we want to stop the server and exit the process then we can press CTRL + C.
If you don't want to exit the server but need access to the terminal, then you can simply create a second terminal instance to use.
    So if we leave the server running and then run the above command to search for all listening ports, we can see our port 3000 open and listening.
Though currently, if we load the server in our browser, we'll see we're getting an error of "Cannot GET /"
    This means it can't get our index page/home page.


## 202. HTTP Requests:


HTTP stands for HyperText Transfer Protocol
    Transfer Protocol describes this is a language that allows computers to talk to eachother across the internet.
When computers want to talk to talk to eachother, they need HTTP to understand each other.
Looking at some basic vocabularity in HTTP so that we what's going in.
When we make these HTTP requests, there are 5 main words that we'll come across:
    GET, POST, PUT, PATCH, DELETE
GET:
    This is when you want to request a resource from the server.
    It could be an HTML website, some text or data.
    You are "getting" something from the server.
POST:
    You are sending a resource to the server.
    This could be information, such as a form.
    On the server, you can take the information and process it or save it etc.
PUT/PATCH:
    These are somewhat related.
    They're both update methods.
    But they differ slightly.
        Put is for replacing a resource with whatever it is you're sending over.
            You want to update by replacing completely.
        Patch is to patch-up a resource.
            You want to update only parts of the resource.
DELETE:
    Straightforward.
    Deletes a resource from the server/database, in the request format.
These 5 terms should be enough to be able to navigate the world of HTTP requests for now.
If we begin with the same server using express and node as in the previous lesson.
    But when we run this code and try to load up the website at that location.
    We get an error saying "Cannot GET"
It's telling us that the we, the client, are trying to get a resource that does not exist on the server.
To fix this we need to add the following code to say what should happen when a user is trying to get at the home page:
                    "
                    app.get("/", (req, res) => {
                        res.send("Hello, World!");
                    });
                    "
    The forward slash in the app.get goes at the end of the localhost:  localhost:3000/, which is the home page.
        The forward slash can be omitted in the case of the home page and it'll still send the request to the home page.
    In this case, we've added the Express method .get() so now our server knows know to do when the get request comes in.
    And then we provide the callback function that runs when the server receives the get request and how the server responds to that request.
Now if we want and reloaded the localhost:3000, we won't see the error anymore, and instead we'll see the "Hello World" text.
Note the plain "/" is the path/endpoint we're calling when we load the page up and it's known as the root path.
Then in the anonymous function, we can tap into the request and response in the anonymous function for the endpoint.
    By convention, they're written as req and res.
In this endpoint, let's console.log the req parameter to see what the req looks like.
Whenever we make a change to our file in the index.js, we have to stop and start the server again for the changes to reflect.
A common mistake that happens is when you have a server open in the terminal, then in another terminal, you open another project and attempt to run it.
    You'll get an error stating that the address is already in use.
        It'll also tell you what port is the one that's already in use.
    You can solve this in 2 ways.
        You can exit the first server and then run the second one again.
    OR, you can kill that port using a terminal command: kill PID
        Where PID is Port ID.
Looking at the printed out request, it's a massive amount of information.
    So we can narrow the information down by instead just print the req.rawHeaders.
    These are basically a list of key:value pairs that come from where the req originated.
Running again, we now can see all the raw headers.
    It tells us where the website is being accessed from, the domain the website is being accessed at, what system you're running etc.
    And that's effectively what the request is.
More importantly, we want to be able to send back a response.
    Which we can do using "res.send()"
    And as a parameter we pass the content we want to send back as the respond to the request.
So when we request the home page at that particular path and hit enter to load it, the browser sends the request to the server.
    Because the server is running and listening and knows how to handle the request, it sends the response back which we then see in the browser.
But thus far, having to stop and restart the server every time we make a change is a pain.
    There's a tool called "Nodemon"
    What it does is automatically restarts the Node application whenever it detects filechanges.
    Meaning you don't have to manually stop and restart the server whenever you make a change.
To use it is as simple as replacing the "node" keyword with "nodemon" whenever we want to run the application.
                        "nodemon index.js"
    It'll then automatically do the monitoring magic behind the scenes.
Now in our get request, instead of sending plain text in the response, we could also send fully formatted HTML:
                        "res.send("<h1>Hello!</h1>");
But before running and testing this out, we'll install nodemon:
                        "npm i -g nodemon"
    The -g flag means nodemon is going to be globally installed onto our computer becuase we don't want it to work for just this one project.
    This flag installs it for use on any project.
Now any time we save changes to the files, Nodemon will pick it up and auto restart the server to reflect the changes.
Thus far, we've been only handling the endpoint that is just the "/".
Looking at endpoints:
    The endpoint in HTTP is /<destination>.
    We've seen we can get ahold of the root by targeting the "/" enpoint.
    If we wanted to add other endpoints to our code so that we can handle more situations, then we simply just need to add another route to our app.
    For example:        "/about"
    And this would call a different endpoint route that is defined in our code.
        And the url with localhost would be: localhost:3000/about


## 203. Postman:


We already know that the purpose of HTTP is for client computers to communicate with our server-side.
    As previously explain, the Client-Side could be anything a user uses to access the website.
    The Server-side consists of everything from the computer running the server code, the application and the database.
To communicate between client and server side, we make HTTP requests.
    And then return an HTTP response back to the client.
Our responses can be anything from text, to HTML, to coded responses.
    For example: the 404 code.
This 404 code is an HTTP Standard Status Response Code.
    These response codes are normally grouped into five categories.
    100 to 199 are usually informational.
    200 to 299 are telling you something went successfully.
    300 to 399 are normally redirects.
    400 to 499 are normally client error responses.
    500 to 599 are normally server error responses.
    The MDN web docs give a good detailed breakdown of each of these codes.
The most common one we're going to be sending and using is the 200 OK response.
    This means everything went just fine.
The meaning and interpretation of each code changes depending on the type of request made.
    But some CODES are specific to certain kinds of requests as well.
Previously, we learned about the HTTP request methods nad we learned about how to use the GET request to start fetching from our server, to handle multiple endpoints, to send back different response content.
A POST request is usually made from some form of HTML form.
    These forms includes things like a sign-up page.
        Where you need to enter name, username, email address etc.
    The form submit goes to the server via a POST request, and the form data is sent along with that request.
    Hopefully the server will do something with that request, such as validating or saving to a database.
    Then it ideally will send back a 200 or 201 response.
If you don't want to create a front-end for the POST, PUT, PATH and DELETE, which we often don't have the time to do when creating APIs.
In the cases where we don't have the time to create the frontend, there's a great tool that professionals love to use.
    That tool is Postman.
With Postman, you can target a specific URL or an endpoint and you can also specify the type of request you want to make.
You can also add values to the body.
    This is important for making POST requests as you'd need to provide the additional required data for the POST request to be successful.
This enables us to test the endpoints without having a front-end up and running.
In express, there's a method equivalent to each request method type for making those requests.
    Then for our responses, we can use the res.sendStatus to send back a status code.
But with the example code we're using, only the get request will actually show us anything.
    This is why it's best to test inside of Postman
    And because we're using Postman, we can even get away with only returning the status code.
Remember, whenever you download node projects from the internet, they generally won't have their packages with them.
    Because there's dependencies for dependencies for dependencies and it swells the file size really quickly.
So what you can do, is instead use the command "npm install".
    What this command does is look at the listed dependencies in the package.json file and download and install all the installations based on that list.
Whenever we test an endpoint in Postman, we can view the status code of the response to see if the request was successful and we got a response from the server.
Note, with the PUT request, you'd be updating ALL of the data, so you'd need to get everything for that user first and then send back all the values and completely replace that resource.
But with PATCH, we only update the few things that we send to the server and the rest of the data stays as is and in tact.
And the DELETE naturally deletes data, and POST submits data for saving.


## 204. Introduction to Middlewares:


